import { HttpRequest } from '@angular/common/http';
import { catchError, filter, finalize, map, mergeMap, tap } from 'rxjs/operators';
import { callWhenFunction } from './call-when-function.function';
import { isHttpResponse } from './http-response.predicate';
export const doJwtRefresh = (next, requestBody, jwtRefreshConfiguration, refreshLock, onError, originalAction) => {
    const refreshRequest = new HttpRequest(jwtRefreshConfiguration.method ?? 'POST', jwtRefreshConfiguration.refreshUrl, requestBody, callWhenFunction(jwtRefreshConfiguration.refreshRequestInitials));
    refreshLock.next(true); // Lock on refresh
    return next.handle(refreshRequest).pipe(filter(isHttpResponse), map((response) => jwtRefreshConfiguration.transformRefreshResponse(response.body)), tap((refreshResponse) => jwtRefreshConfiguration.setRefreshedTokens(refreshResponse)), mergeMap((refreshResponse) => originalAction(refreshResponse)), finalize(() => refreshLock.next(false)), // Unlock on finish
    catchError(onError));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG8tand0LXJlZnJlc2guZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2p3dC9zcmMvbGliL2Z1bmN0aW9uL2RvLWp3dC1yZWZyZXNoLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUtsRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFM0QsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQzNCLElBQWlCLEVBQ2pCLFdBQWdCLEVBQ2hCLHVCQUEwRCxFQUMxRCxXQUFxQyxFQUNyQyxPQUFtRCxFQUNuRCxjQUF3RSxFQUN0RCxFQUFFO0lBQ3BCLE1BQU0sY0FBYyxHQUFHLElBQUksV0FBVyxDQUNyQyx1QkFBdUIsQ0FBQyxNQUFNLElBQUksTUFBTSxFQUN4Qyx1QkFBdUIsQ0FBQyxVQUFVLEVBQ2xDLFdBQVcsRUFDWCxnQkFBZ0IsQ0FBQyx1QkFBdUIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUNoRSxDQUFDO0lBQ0YsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGtCQUFrQjtJQUMxQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUN0QyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQ3RCLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsdUJBQXVCLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ2xGLEdBQUcsQ0FBQyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsdUJBQXVCLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDLENBQUMsRUFDckYsUUFBUSxDQUFDLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsRUFDOUQsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxtQkFBbUI7SUFDNUQsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUNuQixDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBmaWx0ZXIsIGZpbmFsaXplLCBtYXAsIG1lcmdlTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuXHRKd3RSZWZyZXNoQ29uZmlndXJhdGlvbixcblx0Snd0UmVmcmVzaFJlc3BvbnNlLFxufSBmcm9tICcuLi9tb2RlbC9hdXRoLWNvcmUtY29uZmlndXJhdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgY2FsbFdoZW5GdW5jdGlvbiB9IGZyb20gJy4vY2FsbC13aGVuLWZ1bmN0aW9uLmZ1bmN0aW9uJztcbmltcG9ydCB7IGlzSHR0cFJlc3BvbnNlIH0gZnJvbSAnLi9odHRwLXJlc3BvbnNlLnByZWRpY2F0ZSc7XG5cbmV4cG9ydCBjb25zdCBkb0p3dFJlZnJlc2ggPSA8UmVxLCBSZXMsIFJldD4oXG5cdG5leHQ6IEh0dHBIYW5kbGVyLFxuXHRyZXF1ZXN0Qm9keTogUmVxLFxuXHRqd3RSZWZyZXNoQ29uZmlndXJhdGlvbjogSnd0UmVmcmVzaENvbmZpZ3VyYXRpb248UmVxLCBSZXM+LFxuXHRyZWZyZXNoTG9jazogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+LFxuXHRvbkVycm9yOiAocmVmcmVzaEVycm9yOiB1bmtub3duKSA9PiBPYnNlcnZhYmxlPFJldD4sXG5cdG9yaWdpbmFsQWN0aW9uOiAocmVmcmVzaFJlc3BvbnNlOiBKd3RSZWZyZXNoUmVzcG9uc2UpID0+IE9ic2VydmFibGU8UmV0PlxuKTogT2JzZXJ2YWJsZTxSZXQ+ID0+IHtcblx0Y29uc3QgcmVmcmVzaFJlcXVlc3QgPSBuZXcgSHR0cFJlcXVlc3Q8UmVxPihcblx0XHRqd3RSZWZyZXNoQ29uZmlndXJhdGlvbi5tZXRob2QgPz8gJ1BPU1QnLFxuXHRcdGp3dFJlZnJlc2hDb25maWd1cmF0aW9uLnJlZnJlc2hVcmwsXG5cdFx0cmVxdWVzdEJvZHksXG5cdFx0Y2FsbFdoZW5GdW5jdGlvbihqd3RSZWZyZXNoQ29uZmlndXJhdGlvbi5yZWZyZXNoUmVxdWVzdEluaXRpYWxzKVxuXHQpO1xuXHRyZWZyZXNoTG9jay5uZXh0KHRydWUpOyAvLyBMb2NrIG9uIHJlZnJlc2hcblx0cmV0dXJuIG5leHQuaGFuZGxlKHJlZnJlc2hSZXF1ZXN0KS5waXBlKFxuXHRcdGZpbHRlcihpc0h0dHBSZXNwb25zZSksXG5cdFx0bWFwKChyZXNwb25zZSkgPT4gand0UmVmcmVzaENvbmZpZ3VyYXRpb24udHJhbnNmb3JtUmVmcmVzaFJlc3BvbnNlKHJlc3BvbnNlLmJvZHkpKSxcblx0XHR0YXAoKHJlZnJlc2hSZXNwb25zZSkgPT4gand0UmVmcmVzaENvbmZpZ3VyYXRpb24uc2V0UmVmcmVzaGVkVG9rZW5zKHJlZnJlc2hSZXNwb25zZSkpLFxuXHRcdG1lcmdlTWFwKChyZWZyZXNoUmVzcG9uc2UpID0+IG9yaWdpbmFsQWN0aW9uKHJlZnJlc2hSZXNwb25zZSkpLFxuXHRcdGZpbmFsaXplKCgpID0+IHJlZnJlc2hMb2NrLm5leHQoZmFsc2UpKSwgLy8gVW5sb2NrIG9uIGZpbmlzaFxuXHRcdGNhdGNoRXJyb3Iob25FcnJvcilcblx0KTtcbn07XG4iXX0=