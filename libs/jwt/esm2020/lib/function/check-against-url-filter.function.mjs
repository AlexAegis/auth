import { matchAgainst } from './match-against.function';
/**
 * Matches the filter against a separated url. Non-existend rulesets
 * automatically pass. **Empty whitelist rulesets never pass.** Empty blacklist
 * rulesets always pass.
 */
export const checkAgainstUrlFilter = (urlFilter, { domain, path, protocol }) => {
    const protocolMatcher = matchAgainst(protocol);
    const domainMatcher = matchAgainst(domain);
    const pathMatcher = matchAgainst(path);
    const protocolWhitelistRulesPass = urlFilter.protocolWhitelist?.some(protocolMatcher) ?? true;
    const protocolBlacklistRulesPass = !urlFilter.protocolBlacklist?.some(protocolMatcher);
    const domainWhitelistRulesPass = urlFilter.domainWhitelist?.some(domainMatcher) ?? true;
    const domainBlacklistRulesPass = !urlFilter.domainBlacklist?.some(domainMatcher);
    const pathWhitelistRulesPass = urlFilter.pathWhitelist?.some(pathMatcher) ?? true;
    const pathBlacklistRulesPass = !urlFilter.pathBlacklist?.some(pathMatcher);
    return (protocolWhitelistRulesPass &&
        protocolBlacklistRulesPass &&
        domainWhitelistRulesPass &&
        domainBlacklistRulesPass &&
        pathWhitelistRulesPass &&
        pathBlacklistRulesPass);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2stYWdhaW5zdC11cmwtZmlsdGVyLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9qd3Qvc3JjL2xpYi9mdW5jdGlvbi9jaGVjay1hZ2FpbnN0LXVybC1maWx0ZXIuZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBR3hEOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUNwQyxTQUFvQixFQUNwQixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFnQixFQUM5QixFQUFFO0lBQ1osTUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQyxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFdkMsTUFBTSwwQkFBMEIsR0FBRyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQztJQUU5RixNQUFNLDBCQUEwQixHQUFHLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUV2RixNQUFNLHdCQUF3QixHQUFHLFNBQVMsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLElBQUksQ0FBQztJQUV4RixNQUFNLHdCQUF3QixHQUFHLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFakYsTUFBTSxzQkFBc0IsR0FBRyxTQUFTLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUM7SUFFbEYsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRTNFLE9BQU8sQ0FDTiwwQkFBMEI7UUFDMUIsMEJBQTBCO1FBQzFCLHdCQUF3QjtRQUN4Qix3QkFBd0I7UUFDeEIsc0JBQXNCO1FBQ3RCLHNCQUFzQixDQUN0QixDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXJsRmlsdGVyIH0gZnJvbSAnLi4vbW9kZWwvaGVhZGVyLWNvbmZpZ3VyYXRpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IG1hdGNoQWdhaW5zdCB9IGZyb20gJy4vbWF0Y2gtYWdhaW5zdC5mdW5jdGlvbic7XG5pbXBvcnQgeyBTZXBhcmF0ZWRVcmwgfSBmcm9tICcuL3NlcGFyYXRlLXVybC5mdW5jdGlvbic7XG5cbi8qKlxuICogTWF0Y2hlcyB0aGUgZmlsdGVyIGFnYWluc3QgYSBzZXBhcmF0ZWQgdXJsLiBOb24tZXhpc3RlbmQgcnVsZXNldHNcbiAqIGF1dG9tYXRpY2FsbHkgcGFzcy4gKipFbXB0eSB3aGl0ZWxpc3QgcnVsZXNldHMgbmV2ZXIgcGFzcy4qKiBFbXB0eSBibGFja2xpc3RcbiAqIHJ1bGVzZXRzIGFsd2F5cyBwYXNzLlxuICovXG5leHBvcnQgY29uc3QgY2hlY2tBZ2FpbnN0VXJsRmlsdGVyID0gKFxuXHR1cmxGaWx0ZXI6IFVybEZpbHRlcixcblx0eyBkb21haW4sIHBhdGgsIHByb3RvY29sIH06IFNlcGFyYXRlZFVybFxuKTogYm9vbGVhbiA9PiB7XG5cdGNvbnN0IHByb3RvY29sTWF0Y2hlciA9IG1hdGNoQWdhaW5zdChwcm90b2NvbCk7XG5cdGNvbnN0IGRvbWFpbk1hdGNoZXIgPSBtYXRjaEFnYWluc3QoZG9tYWluKTtcblx0Y29uc3QgcGF0aE1hdGNoZXIgPSBtYXRjaEFnYWluc3QocGF0aCk7XG5cblx0Y29uc3QgcHJvdG9jb2xXaGl0ZWxpc3RSdWxlc1Bhc3MgPSB1cmxGaWx0ZXIucHJvdG9jb2xXaGl0ZWxpc3Q/LnNvbWUocHJvdG9jb2xNYXRjaGVyKSA/PyB0cnVlO1xuXG5cdGNvbnN0IHByb3RvY29sQmxhY2tsaXN0UnVsZXNQYXNzID0gIXVybEZpbHRlci5wcm90b2NvbEJsYWNrbGlzdD8uc29tZShwcm90b2NvbE1hdGNoZXIpO1xuXG5cdGNvbnN0IGRvbWFpbldoaXRlbGlzdFJ1bGVzUGFzcyA9IHVybEZpbHRlci5kb21haW5XaGl0ZWxpc3Q/LnNvbWUoZG9tYWluTWF0Y2hlcikgPz8gdHJ1ZTtcblxuXHRjb25zdCBkb21haW5CbGFja2xpc3RSdWxlc1Bhc3MgPSAhdXJsRmlsdGVyLmRvbWFpbkJsYWNrbGlzdD8uc29tZShkb21haW5NYXRjaGVyKTtcblxuXHRjb25zdCBwYXRoV2hpdGVsaXN0UnVsZXNQYXNzID0gdXJsRmlsdGVyLnBhdGhXaGl0ZWxpc3Q/LnNvbWUocGF0aE1hdGNoZXIpID8/IHRydWU7XG5cblx0Y29uc3QgcGF0aEJsYWNrbGlzdFJ1bGVzUGFzcyA9ICF1cmxGaWx0ZXIucGF0aEJsYWNrbGlzdD8uc29tZShwYXRoTWF0Y2hlcik7XG5cblx0cmV0dXJuIChcblx0XHRwcm90b2NvbFdoaXRlbGlzdFJ1bGVzUGFzcyAmJlxuXHRcdHByb3RvY29sQmxhY2tsaXN0UnVsZXNQYXNzICYmXG5cdFx0ZG9tYWluV2hpdGVsaXN0UnVsZXNQYXNzICYmXG5cdFx0ZG9tYWluQmxhY2tsaXN0UnVsZXNQYXNzICYmXG5cdFx0cGF0aFdoaXRlbGlzdFJ1bGVzUGFzcyAmJlxuXHRcdHBhdGhCbGFja2xpc3RSdWxlc1Bhc3Ncblx0KTtcbn07XG4iXX0=