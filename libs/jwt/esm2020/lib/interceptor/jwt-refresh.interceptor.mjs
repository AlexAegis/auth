import { Inject, Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { catchError, filter, switchMap, take, withLatestFrom } from 'rxjs/operators';
import { JwtCannotRefreshError, JwtCouldntRefreshError, JwtError } from '../errors/jwt-error.class';
import { checkAgainstUrlFilter } from '../function/check-against-url-filter.function';
import { intoObservable } from '../function/into-observable.function';
import { matchAgainst } from '../function/match-against.function';
import { separateUrl } from '../function/separate-url.function';
import { tryJwtRefresh } from '../function/try-jwt-refresh.function';
import { JwtToken } from '../model/jwt-token.class';
import { JwtRefreshStateService } from '../service/jwt-refresh-state.service';
import { JwtTokenService } from '../service/jwt-token.service';
import { DEFAULT_JWT_CONFIGURATION_TOKEN, DEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN, JWT_CONFIGURATION_TOKEN, JWT_REFRESH_CONFIGURATION_TOKEN, } from '../token/jwt-configuration.token';
import * as i0 from "@angular/core";
import * as i1 from "../service/jwt-refresh-state.service";
import * as i2 from "../service/jwt-token.service";
export class JwtRefreshInterceptor {
    constructor(jwtConfig, defaultJwtConfig, refreshConfig, defaultJwtRefreshConfig, jwtRefreshStateService, jwtTokenService) {
        this.jwtConfig = jwtConfig;
        this.defaultJwtConfig = defaultJwtConfig;
        this.refreshConfig = refreshConfig;
        this.defaultJwtRefreshConfig = defaultJwtRefreshConfig;
        this.jwtRefreshStateService = jwtRefreshStateService;
        this.jwtTokenService = jwtTokenService;
        this.jwtConfiguration = {
            ...defaultJwtConfig,
            ...jwtConfig,
        };
        this.jwtRefreshConfiguration = {
            ...defaultJwtRefreshConfig,
            ...refreshConfig,
        };
        this.rawRefreshToken$ = intoObservable(this.jwtRefreshConfiguration.getRefreshToken ?? (() => null));
        this.isRawRefreshTokenGetterAvailable = !!this.jwtRefreshConfiguration.getRefreshToken;
    }
    handleWithToken(request, next, token) {
        const requestWithUpdatedTokens = request.clone({
            headers: request.headers.set(this.jwtConfiguration.header, this.jwtConfiguration.scheme + token),
        });
        return next.handle(requestWithUpdatedTokens);
    }
    intercept(request, next) {
        const separatedUrl = separateUrl(request.url);
        const jwtHeaderValue = request.headers.get(this.jwtConfiguration.header);
        // Only do something if the request is headed towards a protected endpoint.
        // The forRoot method of the module ensures that this interceptor is injected
        // after the token injector interceptor. So by the time this executes, the token should
        // be here.
        // And if the url is not the refresh url itself, and any of the other explicitly
        // filtered urls where refresh is prohibited by config.
        if (jwtHeaderValue &&
            !matchAgainst(request.url)(this.jwtRefreshConfiguration.refreshUrl) &&
            checkAgainstUrlFilter(this.jwtRefreshConfiguration, separatedUrl)) {
            // If locked, instead of refreshing, wait for it and get the new accessToken
            if (this.jwtRefreshStateService.refreshLock$.value) {
                // When the lock unlocks, retry with the new token
                return this.jwtRefreshStateService.refreshLock$.pipe(filter((lock) => !lock), take(1), withLatestFrom(this.jwtTokenService.rawAccessToken$), switchMap(([, accessToken]) => {
                    // ...but only if there is actually a token
                    if (accessToken) {
                        return this.handleWithToken(request, next, accessToken);
                    }
                    else {
                        return throwError(JwtError.createErrorResponse(request, 'No access token available after waiting for a refresh'));
                    }
                }));
            }
            return this.rawRefreshToken$.pipe(take(1), switchMap((rawRefreshToken) => {
                const rawToken = JwtToken.stripScheme(jwtHeaderValue, this.jwtConfiguration.scheme);
                const token = JwtToken.from(rawToken);
                const refreshToken = rawRefreshToken ? JwtToken.from(rawRefreshToken) : null;
                const isAccessTokenExpiredOrInvalid = !token || token.isExpired();
                const isRefreshTokenExpiredOrInvalid = !refreshToken || refreshToken.isExpired();
                // If we know beforehand that nothing can be done, panic.
                if (isAccessTokenExpiredOrInvalid &&
                    this.isRawRefreshTokenGetterAvailable &&
                    isRefreshTokenExpiredOrInvalid) {
                    return throwError(JwtCannotRefreshError.createErrorResponse(request, 'Both access and refresh tokens are expired'));
                }
                // If the conversion would fail, that would handle the same as an expired token
                return (isAccessTokenExpiredOrInvalid
                    ? // If the token is used and is expired, don't even try the request.
                        throwError('Expired token, refresh first')
                    : // If it seems okay, try the request
                        next.handle(request)).pipe(catchError((error) => 
                // If the request failed, or we failed at the precheck
                // Acquire a new token, but only if the error is allowing it
                // If a refresh is already happening, wait for it, and use it's results
                tryJwtRefresh(next, error, this.jwtRefreshConfiguration, this.jwtRefreshStateService.refreshLock$, (refreshError) => throwError(JwtCouldntRefreshError.createErrorResponse(request, refreshError)), (refreshResponse) => this.handleWithToken(request, next, refreshResponse.accessToken))));
            }));
        }
        else {
            return next.handle(request);
        }
    }
}
JwtRefreshInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.0", ngImport: i0, type: JwtRefreshInterceptor, deps: [{ token: JWT_CONFIGURATION_TOKEN }, { token: DEFAULT_JWT_CONFIGURATION_TOKEN }, { token: JWT_REFRESH_CONFIGURATION_TOKEN }, { token: DEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN }, { token: i1.JwtRefreshStateService }, { token: i2.JwtTokenService }], target: i0.ɵɵFactoryTarget.Injectable });
JwtRefreshInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.0", ngImport: i0, type: JwtRefreshInterceptor });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.0", ngImport: i0, type: JwtRefreshInterceptor, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [JWT_CONFIGURATION_TOKEN]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DEFAULT_JWT_CONFIGURATION_TOKEN]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [JWT_REFRESH_CONFIGURATION_TOKEN]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN]
                }] }, { type: i1.JwtRefreshStateService }, { type: i2.JwtTokenService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LXJlZnJlc2guaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2p3dC9zcmMvbGliL2ludGVyY2VwdG9yL2p3dC1yZWZyZXNoLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsc0JBQXNCLEVBQUUsUUFBUSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDcEcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDdEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDaEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBS3JFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUNOLCtCQUErQixFQUMvQix1Q0FBdUMsRUFDdkMsdUJBQXVCLEVBQ3ZCLCtCQUErQixHQUMvQixNQUFNLGtDQUFrQyxDQUFDOzs7O0FBRzFDLE1BQU0sT0FBTyxxQkFBcUI7SUFNakMsWUFFVSxTQUEyQixFQUUzQixn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SyxFQUNMLElBQUksQ0FBQyx1QkFBdUIsRUFDNUIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksRUFDeEMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUNoQixVQUFVLENBQ1Qsc0JBQXNCLENBQUMsbUJBQW1CLENBQ3pDLE9BQU8sRUFDUCxZQUFZLENBQ1osQ0FDRCxFQUNGLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FDbkIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FDakUsQ0FDRCxDQUNELENBQUM7WUFDSCxDQUFDLENBQUMsQ0FDRixDQUFDO1NBQ0Y7YUFBTTtZQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM1QjtJQUNGLENBQUM7O2tIQXJKVyxxQkFBcUIsa0JBT3hCLHVCQUF1QixhQUV2QiwrQkFBK0IsYUFFL0IsK0JBQStCLGFBRS9CLHVDQUF1QztzSEFicEMscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBRGpDLFVBQVU7OzBCQVFSLE1BQU07MkJBQUMsdUJBQXVCOzswQkFFOUIsTUFBTTsyQkFBQywrQkFBK0I7OzBCQUV0QyxNQUFNOzJCQUFDLCtCQUErQjs7MEJBRXRDLE1BQU07MkJBQUMsdUNBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0SHR0cEVycm9yUmVzcG9uc2UsXG5cdEh0dHBFdmVudCxcblx0SHR0cEhhbmRsZXIsXG5cdEh0dHBJbnRlcmNlcHRvcixcblx0SHR0cFJlcXVlc3QsXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgZmlsdGVyLCBzd2l0Y2hNYXAsIHRha2UsIHdpdGhMYXRlc3RGcm9tIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSnd0Q2Fubm90UmVmcmVzaEVycm9yLCBKd3RDb3VsZG50UmVmcmVzaEVycm9yLCBKd3RFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9qd3QtZXJyb3IuY2xhc3MnO1xuaW1wb3J0IHsgY2hlY2tBZ2FpbnN0VXJsRmlsdGVyIH0gZnJvbSAnLi4vZnVuY3Rpb24vY2hlY2stYWdhaW5zdC11cmwtZmlsdGVyLmZ1bmN0aW9uJztcbmltcG9ydCB7IGludG9PYnNlcnZhYmxlIH0gZnJvbSAnLi4vZnVuY3Rpb24vaW50by1vYnNlcnZhYmxlLmZ1bmN0aW9uJztcbmltcG9ydCB7IG1hdGNoQWdhaW5zdCB9IGZyb20gJy4uL2Z1bmN0aW9uL21hdGNoLWFnYWluc3QuZnVuY3Rpb24nO1xuaW1wb3J0IHsgc2VwYXJhdGVVcmwgfSBmcm9tICcuLi9mdW5jdGlvbi9zZXBhcmF0ZS11cmwuZnVuY3Rpb24nO1xuaW1wb3J0IHsgdHJ5Snd0UmVmcmVzaCB9IGZyb20gJy4uL2Z1bmN0aW9uL3RyeS1qd3QtcmVmcmVzaC5mdW5jdGlvbic7XG5pbXBvcnQge1xuXHRKd3RDb25maWd1cmF0aW9uLFxuXHRKd3RSZWZyZXNoQ29uZmlndXJhdGlvbixcbn0gZnJvbSAnLi4vbW9kZWwvYXV0aC1jb3JlLWNvbmZpZ3VyYXRpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IEp3dFRva2VuIH0gZnJvbSAnLi4vbW9kZWwvand0LXRva2VuLmNsYXNzJztcbmltcG9ydCB7IEp3dFJlZnJlc2hTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL2p3dC1yZWZyZXNoLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgSnd0VG9rZW5TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZS9qd3QtdG9rZW4uc2VydmljZSc7XG5pbXBvcnQge1xuXHRERUZBVUxUX0pXVF9DT05GSUdVUkFUSU9OX1RPS0VOLFxuXHRERUZBVUxUX0pXVF9SRUZSRVNIX0NPTkZJR1VSQVRJT05fVE9LRU4sXG5cdEpXVF9DT05GSUdVUkFUSU9OX1RPS0VOLFxuXHRKV1RfUkVGUkVTSF9DT05GSUdVUkFUSU9OX1RPS0VOLFxufSBmcm9tICcuLi90b2tlbi9qd3QtY29uZmlndXJhdGlvbi50b2tlbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBKd3RSZWZyZXNoSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXHRwcml2YXRlIHJlYWRvbmx5IGp3dENvbmZpZ3VyYXRpb24hOiBKd3RDb25maWd1cmF0aW9uO1xuXHRwcml2YXRlIHJlYWRvbmx5IGp3dFJlZnJlc2hDb25maWd1cmF0aW9uITogSnd0UmVmcmVzaENvbmZpZ3VyYXRpb248dW5rbm93biwgdW5rbm93bj47XG5cdHByaXZhdGUgcmVhZG9ubHkgcmF3UmVmcmVzaFRva2VuJDogT2JzZXJ2YWJsZTxzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkPjtcblx0cHJpdmF0ZSByZWFkb25seSBpc1Jhd1JlZnJlc2hUb2tlbkdldHRlckF2YWlsYWJsZTogYm9vbGVhbjtcblxuXHRwdWJsaWMgY29uc3RydWN0b3IoXG5cdFx0QEluamVjdChKV1RfQ09ORklHVVJBVElPTl9UT0tFTilcblx0XHRyZWFkb25seSBqd3RDb25maWc6IEp3dENvbmZpZ3VyYXRpb24sXG5cdFx0QEluamVjdChERUZBVUxUX0pXVF9DT05GSUdVUkFUSU9OX1RPS0VOKVxuXHRcdHJlYWRvbmx5IGRlZmF1bHRKd3RDb25maWc6IEp3dENvbmZpZ3VyYXRpb24sXG5cdFx0QEluamVjdChKV1RfUkVGUkVTSF9DT05GSUdVUkFUSU9OX1RPS0VOKVxuXHRcdHJlYWRvbmx5IHJlZnJlc2hDb25maWc6IEp3dFJlZnJlc2hDb25maWd1cmF0aW9uPHVua25vd24sIHVua25vd24+LFxuXHRcdEBJbmplY3QoREVGQVVMVF9KV1RfUkVGUkVTSF9DT05GSUdVUkFUSU9OX1RPS0VOKVxuXHRcdHJlYWRvbmx5IGRlZmF1bHRKd3RSZWZyZXNoQ29uZmlnOiBKd3RSZWZyZXNoQ29uZmlndXJhdGlvbjx1bmtub3duLCB1bmtub3duPixcblx0XHRwcml2YXRlIHJlYWRvbmx5IGp3dFJlZnJlc2hTdGF0ZVNlcnZpY2U6IEp3dFJlZnJlc2hTdGF0ZVNlcnZpY2UsXG5cdFx0cHJpdmF0ZSByZWFkb25seSBqd3RUb2tlblNlcnZpY2U6IEp3dFRva2VuU2VydmljZVxuXHQpIHtcblx0XHR0aGlzLmp3dENvbmZpZ3VyYXRpb24gPSB7XG5cdFx0XHQuLi5kZWZhdWx0Snd0Q29uZmlnLFxuXHRcdFx0Li4uand0Q29uZmlnLFxuXHRcdH07XG5cblx0XHR0aGlzLmp3dFJlZnJlc2hDb25maWd1cmF0aW9uID0ge1xuXHRcdFx0Li4uZGVmYXVsdEp3dFJlZnJlc2hDb25maWcsXG5cdFx0XHQuLi5yZWZyZXNoQ29uZmlnLFxuXHRcdH07XG5cblx0XHR0aGlzLnJhd1JlZnJlc2hUb2tlbiQgPSBpbnRvT2JzZXJ2YWJsZShcblx0XHRcdHRoaXMuand0UmVmcmVzaENvbmZpZ3VyYXRpb24uZ2V0UmVmcmVzaFRva2VuID8/ICgoKSA9PiBudWxsKVxuXHRcdCk7XG5cblx0XHR0aGlzLmlzUmF3UmVmcmVzaFRva2VuR2V0dGVyQXZhaWxhYmxlID0gISF0aGlzLmp3dFJlZnJlc2hDb25maWd1cmF0aW9uLmdldFJlZnJlc2hUb2tlbjtcblx0fVxuXG5cdHByaXZhdGUgaGFuZGxlV2l0aFRva2VuKFxuXHRcdHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PHVua25vd24+LFxuXHRcdG5leHQ6IEh0dHBIYW5kbGVyLFxuXHRcdHRva2VuOiBzdHJpbmdcblx0KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8dW5rbm93bj4+IHtcblx0XHRjb25zdCByZXF1ZXN0V2l0aFVwZGF0ZWRUb2tlbnMgPSByZXF1ZXN0LmNsb25lKHtcblx0XHRcdGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycy5zZXQoXG5cdFx0XHRcdHRoaXMuand0Q29uZmlndXJhdGlvbi5oZWFkZXIsXG5cdFx0XHRcdHRoaXMuand0Q29uZmlndXJhdGlvbi5zY2hlbWUgKyB0b2tlblxuXHRcdFx0KSxcblx0XHR9KTtcblx0XHRyZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdFdpdGhVcGRhdGVkVG9rZW5zKTtcblx0fVxuXG5cdHB1YmxpYyBpbnRlcmNlcHQoXG5cdFx0cmVxdWVzdDogSHR0cFJlcXVlc3Q8dW5rbm93bj4sXG5cdFx0bmV4dDogSHR0cEhhbmRsZXJcblx0KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8dW5rbm93bj4+IHtcblx0XHRjb25zdCBzZXBhcmF0ZWRVcmwgPSBzZXBhcmF0ZVVybChyZXF1ZXN0LnVybCk7XG5cdFx0Y29uc3Qgand0SGVhZGVyVmFsdWUgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KHRoaXMuand0Q29uZmlndXJhdGlvbi5oZWFkZXIpO1xuXG5cdFx0Ly8gT25seSBkbyBzb21ldGhpbmcgaWYgdGhlIHJlcXVlc3QgaXMgaGVhZGVkIHRvd2FyZHMgYSBwcm90ZWN0ZWQgZW5kcG9pbnQuXG5cdFx0Ly8gVGhlIGZvclJvb3QgbWV0aG9kIG9mIHRoZSBtb2R1bGUgZW5zdXJlcyB0aGF0IHRoaXMgaW50ZXJjZXB0b3IgaXMgaW5qZWN0ZWRcblx0XHQvLyBhZnRlciB0aGUgdG9rZW4gaW5qZWN0b3IgaW50ZXJjZXB0b3IuIFNvIGJ5IHRoZSB0aW1lIHRoaXMgZXhlY3V0ZXMsIHRoZSB0b2tlbiBzaG91bGRcblx0XHQvLyBiZSBoZXJlLlxuXHRcdC8vIEFuZCBpZiB0aGUgdXJsIGlzIG5vdCB0aGUgcmVmcmVzaCB1cmwgaXRzZWxmLCBhbmQgYW55IG9mIHRoZSBvdGhlciBleHBsaWNpdGx5XG5cdFx0Ly8gZmlsdGVyZWQgdXJscyB3aGVyZSByZWZyZXNoIGlzIHByb2hpYml0ZWQgYnkgY29uZmlnLlxuXHRcdGlmIChcblx0XHRcdGp3dEhlYWRlclZhbHVlICYmXG5cdFx0XHQhbWF0Y2hBZ2FpbnN0KHJlcXVlc3QudXJsKSh0aGlzLmp3dFJlZnJlc2hDb25maWd1cmF0aW9uLnJlZnJlc2hVcmwpICYmXG5cdFx0XHRjaGVja0FnYWluc3RVcmxGaWx0ZXIodGhpcy5qd3RSZWZyZXNoQ29uZmlndXJhdGlvbiwgc2VwYXJhdGVkVXJsKVxuXHRcdCkge1xuXHRcdFx0Ly8gSWYgbG9ja2VkLCBpbnN0ZWFkIG9mIHJlZnJlc2hpbmcsIHdhaXQgZm9yIGl0IGFuZCBnZXQgdGhlIG5ldyBhY2Nlc3NUb2tlblxuXHRcdFx0aWYgKHRoaXMuand0UmVmcmVzaFN0YXRlU2VydmljZS5yZWZyZXNoTG9jayQudmFsdWUpIHtcblx0XHRcdFx0Ly8gV2hlbiB0aGUgbG9jayB1bmxvY2tzLCByZXRyeSB3aXRoIHRoZSBuZXcgdG9rZW5cblx0XHRcdFx0cmV0dXJuIHRoaXMuand0UmVmcmVzaFN0YXRlU2VydmljZS5yZWZyZXNoTG9jayQucGlwZShcblx0XHRcdFx0XHRmaWx0ZXIoKGxvY2spID0+ICFsb2NrKSxcblx0XHRcdFx0XHR0YWtlKDEpLFxuXHRcdFx0XHRcdHdpdGhMYXRlc3RGcm9tKHRoaXMuand0VG9rZW5TZXJ2aWNlLnJhd0FjY2Vzc1Rva2VuJCksXG5cdFx0XHRcdFx0c3dpdGNoTWFwKChbLCBhY2Nlc3NUb2tlbl0pID0+IHtcblx0XHRcdFx0XHRcdC8vIC4uLmJ1dCBvbmx5IGlmIHRoZXJlIGlzIGFjdHVhbGx5IGEgdG9rZW5cblx0XHRcdFx0XHRcdGlmIChhY2Nlc3NUb2tlbikge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5oYW5kbGVXaXRoVG9rZW4ocmVxdWVzdCwgbmV4dCwgYWNjZXNzVG9rZW4pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRocm93RXJyb3IoXG5cdFx0XHRcdFx0XHRcdFx0Snd0RXJyb3IuY3JlYXRlRXJyb3JSZXNwb25zZShcblx0XHRcdFx0XHRcdFx0XHRcdHJlcXVlc3QsXG5cdFx0XHRcdFx0XHRcdFx0XHQnTm8gYWNjZXNzIHRva2VuIGF2YWlsYWJsZSBhZnRlciB3YWl0aW5nIGZvciBhIHJlZnJlc2gnXG5cdFx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLnJhd1JlZnJlc2hUb2tlbiQucGlwZShcblx0XHRcdFx0dGFrZSgxKSxcblx0XHRcdFx0c3dpdGNoTWFwKChyYXdSZWZyZXNoVG9rZW4pID0+IHtcblx0XHRcdFx0XHRjb25zdCByYXdUb2tlbiA9IEp3dFRva2VuLnN0cmlwU2NoZW1lKFxuXHRcdFx0XHRcdFx0and0SGVhZGVyVmFsdWUsXG5cdFx0XHRcdFx0XHR0aGlzLmp3dENvbmZpZ3VyYXRpb24uc2NoZW1lXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRjb25zdCB0b2tlbiA9IEp3dFRva2VuLmZyb20ocmF3VG9rZW4pO1xuXHRcdFx0XHRcdGNvbnN0IHJlZnJlc2hUb2tlbiA9IHJhd1JlZnJlc2hUb2tlbiA/IEp3dFRva2VuLmZyb20ocmF3UmVmcmVzaFRva2VuKSA6IG51bGw7XG5cdFx0XHRcdFx0Y29uc3QgaXNBY2Nlc3NUb2tlbkV4cGlyZWRPckludmFsaWQgPSAhdG9rZW4gfHwgdG9rZW4uaXNFeHBpcmVkKCk7XG5cdFx0XHRcdFx0Y29uc3QgaXNSZWZyZXNoVG9rZW5FeHBpcmVkT3JJbnZhbGlkID1cblx0XHRcdFx0XHRcdCFyZWZyZXNoVG9rZW4gfHwgcmVmcmVzaFRva2VuLmlzRXhwaXJlZCgpO1xuXHRcdFx0XHRcdC8vIElmIHdlIGtub3cgYmVmb3JlaGFuZCB0aGF0IG5vdGhpbmcgY2FuIGJlIGRvbmUsIHBhbmljLlxuXHRcdFx0XHRcdGlmIChcblx0XHRcdFx0XHRcdGlzQWNjZXNzVG9rZW5FeHBpcmVkT3JJbnZhbGlkICYmXG5cdFx0XHRcdFx0XHR0aGlzLmlzUmF3UmVmcmVzaFRva2VuR2V0dGVyQXZhaWxhYmxlICYmXG5cdFx0XHRcdFx0XHRpc1JlZnJlc2hUb2tlbkV4cGlyZWRPckludmFsaWRcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aHJvd0Vycm9yKFxuXHRcdFx0XHRcdFx0XHRKd3RDYW5ub3RSZWZyZXNoRXJyb3IuY3JlYXRlRXJyb3JSZXNwb25zZShcblx0XHRcdFx0XHRcdFx0XHRyZXF1ZXN0LFxuXHRcdFx0XHRcdFx0XHRcdCdCb3RoIGFjY2VzcyBhbmQgcmVmcmVzaCB0b2tlbnMgYXJlIGV4cGlyZWQnXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIElmIHRoZSBjb252ZXJzaW9uIHdvdWxkIGZhaWwsIHRoYXQgd291bGQgaGFuZGxlIHRoZSBzYW1lIGFzIGFuIGV4cGlyZWQgdG9rZW5cblx0XHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdFx0aXNBY2Nlc3NUb2tlbkV4cGlyZWRPckludmFsaWRcblx0XHRcdFx0XHRcdFx0PyAvLyBJZiB0aGUgdG9rZW4gaXMgdXNlZCBhbmQgaXMgZXhwaXJlZCwgZG9uJ3QgZXZlbiB0cnkgdGhlIHJlcXVlc3QuXG5cdFx0XHRcdFx0XHRcdCAgdGhyb3dFcnJvcignRXhwaXJlZCB0b2tlbiwgcmVmcmVzaCBmaXJzdCcpXG5cdFx0XHRcdFx0XHRcdDogLy8gSWYgaXQgc2VlbXMgb2theSwgdHJ5IHRoZSByZXF1ZXN0XG5cdFx0XHRcdFx0XHRcdCAgbmV4dC5oYW5kbGUocmVxdWVzdClcblx0XHRcdFx0XHQpLnBpcGUoXG5cdFx0XHRcdFx0XHRjYXRjaEVycm9yKChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UgfCBzdHJpbmcpID0+XG5cdFx0XHRcdFx0XHRcdC8vIElmIHRoZSByZXF1ZXN0IGZhaWxlZCwgb3Igd2UgZmFpbGVkIGF0IHRoZSBwcmVjaGVja1xuXHRcdFx0XHRcdFx0XHQvLyBBY3F1aXJlIGEgbmV3IHRva2VuLCBidXQgb25seSBpZiB0aGUgZXJyb3IgaXMgYWxsb3dpbmcgaXRcblx0XHRcdFx0XHRcdFx0Ly8gSWYgYSByZWZyZXNoIGlzIGFscmVhZHkgaGFwcGVuaW5nLCB3YWl0IGZvciBpdCwgYW5kIHVzZSBpdCdzIHJlc3VsdHNcblx0XHRcdFx0XHRcdFx0dHJ5Snd0UmVmcmVzaChcblx0XHRcdFx0XHRcdFx0XHRuZXh0LFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yLFxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuand0UmVmcmVzaENvbmZpZ3VyYXRpb24sXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5qd3RSZWZyZXNoU3RhdGVTZXJ2aWNlLnJlZnJlc2hMb2NrJCxcblx0XHRcdFx0XHRcdFx0XHQocmVmcmVzaEVycm9yKSA9PlxuXHRcdFx0XHRcdFx0XHRcdFx0dGhyb3dFcnJvcihcblx0XHRcdFx0XHRcdFx0XHRcdFx0Snd0Q291bGRudFJlZnJlc2hFcnJvci5jcmVhdGVFcnJvclJlc3BvbnNlKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlcXVlc3QsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVmcmVzaEVycm9yXG5cdFx0XHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdFx0KHJlZnJlc2hSZXNwb25zZSkgPT5cblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuaGFuZGxlV2l0aFRva2VuKHJlcXVlc3QsIG5leHQsIHJlZnJlc2hSZXNwb25zZS5hY2Nlc3NUb2tlbilcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0pXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCk7XG5cdFx0fVxuXHR9XG59XG4iXX0=