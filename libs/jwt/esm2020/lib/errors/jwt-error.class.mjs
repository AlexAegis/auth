import { HttpErrorResponse } from '@angular/common/http';
export class JwtError extends Error {
    constructor(originalRequest, originalError, message = JwtError.type) {
        super(message);
        this.originalRequest = originalRequest;
        this.originalError = originalError;
    }
    static createErrorResponse(request, refreshError) {
        return new HttpErrorResponse({
            error: JwtError.createErrorEvent(request, refreshError),
        });
    }
    static createErrorEvent(request, refreshError) {
        return new ErrorEvent(JwtError.type, {
            error: new JwtError(request, refreshError),
        });
    }
}
JwtError.type = 'JWT_ERROR';
/**
 * When both access and refresh tokens are either invalid or expired!
 */
export class JwtCannotRefreshError extends JwtError {
    constructor(originalRequest, originalError) {
        super(originalRequest, originalError, JwtCannotRefreshError.type);
        this.originalRequest = originalRequest;
        this.originalError = originalError;
    }
    static createErrorResponse(request, refreshError) {
        return new HttpErrorResponse({
            error: JwtCannotRefreshError.createErrorEvent(request, refreshError),
        });
    }
    static createErrorEvent(request, refreshError) {
        return new ErrorEvent(JwtCannotRefreshError.type, {
            error: new JwtCannotRefreshError(request, refreshError),
        });
    }
}
JwtCannotRefreshError.type = 'JWT_CANNOT_REFRESH_ERROR';
/**
 * When refresh failed
 */
export class JwtCouldntRefreshError extends JwtError {
    constructor(originalRequest, originalError) {
        super(originalRequest, originalError, JwtCouldntRefreshError.type);
        this.originalRequest = originalRequest;
        this.originalError = originalError;
    }
    static createErrorResponse(request, refreshError) {
        return new HttpErrorResponse({
            error: JwtCouldntRefreshError.createErrorEvent(request, refreshError),
        });
    }
    static createErrorEvent(request, refreshError) {
        return new ErrorEvent(JwtCouldntRefreshError.type, {
            error: new JwtCouldntRefreshError(request, refreshError),
        });
    }
}
JwtCouldntRefreshError.type = 'JWT_COULDNT_REFRESH_ERROR';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LWVycm9yLmNsYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9qd3Qvc3JjL2xpYi9lcnJvcnMvand0LWVycm9yLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBRXRFLE1BQU0sT0FBTyxRQUFTLFNBQVEsS0FBSztJQUdsQyxZQUNpQixlQUFpRCxFQUNqRCxhQUFzQixFQUN0QyxPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUk7UUFFdkIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBSkMsb0JBQWUsR0FBZixlQUFlLENBQWtDO1FBQ2pELGtCQUFhLEdBQWIsYUFBYSxDQUFTO0lBSXZDLENBQUM7SUFFRCxNQUFNLENBQUMsbUJBQW1CLENBQ3pCLE9BQXlDLEVBQ3pDLFlBQXFCO1FBRXJCLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQztZQUM1QixLQUFLLEVBQUUsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUM7U0FDdkQsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FDdEIsT0FBeUMsRUFDekMsWUFBcUI7UUFFckIsT0FBTyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ3BDLEtBQUssRUFBRSxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDO1NBQzFDLENBQUMsQ0FBQztJQUNKLENBQUM7O0FBMUJNLGFBQUksR0FBRyxXQUFXLENBQUM7QUE2QjNCOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFFBQVE7SUFHbEQsWUFDaUIsZUFBaUQsRUFDakQsYUFBc0I7UUFFdEMsS0FBSyxDQUFDLGVBQWUsRUFBRSxhQUFhLEVBQUUscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFIbEQsb0JBQWUsR0FBZixlQUFlLENBQWtDO1FBQ2pELGtCQUFhLEdBQWIsYUFBYSxDQUFTO0lBR3ZDLENBQUM7SUFFRCxNQUFNLENBQUMsbUJBQW1CLENBQ3pCLE9BQXlDLEVBQ3pDLFlBQXFCO1FBRXJCLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQztZQUM1QixLQUFLLEVBQUUscUJBQXFCLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQztTQUNwRSxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLGdCQUFnQixDQUN0QixPQUF5QyxFQUN6QyxZQUFxQjtRQUVyQixPQUFPLElBQUksVUFBVSxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRTtZQUNqRCxLQUFLLEVBQUUsSUFBSSxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDO1NBQ3ZELENBQUMsQ0FBQztJQUNKLENBQUM7O0FBekJNLDBCQUFJLEdBQUcsMEJBQTBCLENBQUM7QUE0QjFDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHNCQUF1QixTQUFRLFFBQVE7SUFHbkQsWUFDaUIsZUFBaUQsRUFDakQsYUFBc0I7UUFFdEMsS0FBSyxDQUFDLGVBQWUsRUFBRSxhQUFhLEVBQUUsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFIbkQsb0JBQWUsR0FBZixlQUFlLENBQWtDO1FBQ2pELGtCQUFhLEdBQWIsYUFBYSxDQUFTO0lBR3ZDLENBQUM7SUFFRCxNQUFNLENBQUMsbUJBQW1CLENBQ3pCLE9BQXlDLEVBQ3pDLFlBQXFCO1FBRXJCLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQztZQUM1QixLQUFLLEVBQUUsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQztTQUNyRSxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLGdCQUFnQixDQUN0QixPQUF5QyxFQUN6QyxZQUFxQjtRQUVyQixPQUFPLElBQUksVUFBVSxDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRTtZQUNsRCxLQUFLLEVBQUUsSUFBSSxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDO1NBQ3hELENBQUMsQ0FBQztJQUNKLENBQUM7O0FBekJNLDJCQUFJLEdBQUcsMkJBQTJCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmV4cG9ydCBjbGFzcyBKd3RFcnJvciBleHRlbmRzIEVycm9yIHtcblx0c3RhdGljIHR5cGUgPSAnSldUX0VSUk9SJztcblxuXHRwdWJsaWMgY29uc3RydWN0b3IoXG5cdFx0cHVibGljIHJlYWRvbmx5IG9yaWdpbmFsUmVxdWVzdDogSHR0cFJlcXVlc3Q8dW5rbm93bj4gfCB1bmRlZmluZWQsXG5cdFx0cHVibGljIHJlYWRvbmx5IG9yaWdpbmFsRXJyb3I6IHVua25vd24sXG5cdFx0bWVzc2FnZSA9IEp3dEVycm9yLnR5cGVcblx0KSB7XG5cdFx0c3VwZXIobWVzc2FnZSk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRXJyb3JSZXNwb25zZShcblx0XHRyZXF1ZXN0OiBIdHRwUmVxdWVzdDx1bmtub3duPiB8IHVuZGVmaW5lZCxcblx0XHRyZWZyZXNoRXJyb3I6IHVua25vd25cblx0KTogSHR0cEVycm9yUmVzcG9uc2Uge1xuXHRcdHJldHVybiBuZXcgSHR0cEVycm9yUmVzcG9uc2Uoe1xuXHRcdFx0ZXJyb3I6IEp3dEVycm9yLmNyZWF0ZUVycm9yRXZlbnQocmVxdWVzdCwgcmVmcmVzaEVycm9yKSxcblx0XHR9KTtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGVFcnJvckV2ZW50KFxuXHRcdHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PHVua25vd24+IHwgdW5kZWZpbmVkLFxuXHRcdHJlZnJlc2hFcnJvcjogdW5rbm93blxuXHQpOiBFcnJvckV2ZW50IHtcblx0XHRyZXR1cm4gbmV3IEVycm9yRXZlbnQoSnd0RXJyb3IudHlwZSwge1xuXHRcdFx0ZXJyb3I6IG5ldyBKd3RFcnJvcihyZXF1ZXN0LCByZWZyZXNoRXJyb3IpLFxuXHRcdH0pO1xuXHR9XG59XG5cbi8qKlxuICogV2hlbiBib3RoIGFjY2VzcyBhbmQgcmVmcmVzaCB0b2tlbnMgYXJlIGVpdGhlciBpbnZhbGlkIG9yIGV4cGlyZWQhXG4gKi9cbmV4cG9ydCBjbGFzcyBKd3RDYW5ub3RSZWZyZXNoRXJyb3IgZXh0ZW5kcyBKd3RFcnJvciB7XG5cdHN0YXRpYyB0eXBlID0gJ0pXVF9DQU5OT1RfUkVGUkVTSF9FUlJPUic7XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKFxuXHRcdHB1YmxpYyByZWFkb25seSBvcmlnaW5hbFJlcXVlc3Q6IEh0dHBSZXF1ZXN0PHVua25vd24+IHwgdW5kZWZpbmVkLFxuXHRcdHB1YmxpYyByZWFkb25seSBvcmlnaW5hbEVycm9yOiB1bmtub3duXG5cdCkge1xuXHRcdHN1cGVyKG9yaWdpbmFsUmVxdWVzdCwgb3JpZ2luYWxFcnJvciwgSnd0Q2Fubm90UmVmcmVzaEVycm9yLnR5cGUpO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZUVycm9yUmVzcG9uc2UoXG5cdFx0cmVxdWVzdDogSHR0cFJlcXVlc3Q8dW5rbm93bj4gfCB1bmRlZmluZWQsXG5cdFx0cmVmcmVzaEVycm9yOiB1bmtub3duXG5cdCk6IEh0dHBFcnJvclJlc3BvbnNlIHtcblx0XHRyZXR1cm4gbmV3IEh0dHBFcnJvclJlc3BvbnNlKHtcblx0XHRcdGVycm9yOiBKd3RDYW5ub3RSZWZyZXNoRXJyb3IuY3JlYXRlRXJyb3JFdmVudChyZXF1ZXN0LCByZWZyZXNoRXJyb3IpLFxuXHRcdH0pO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZUVycm9yRXZlbnQoXG5cdFx0cmVxdWVzdDogSHR0cFJlcXVlc3Q8dW5rbm93bj4gfCB1bmRlZmluZWQsXG5cdFx0cmVmcmVzaEVycm9yOiB1bmtub3duXG5cdCk6IEVycm9yRXZlbnQge1xuXHRcdHJldHVybiBuZXcgRXJyb3JFdmVudChKd3RDYW5ub3RSZWZyZXNoRXJyb3IudHlwZSwge1xuXHRcdFx0ZXJyb3I6IG5ldyBKd3RDYW5ub3RSZWZyZXNoRXJyb3IocmVxdWVzdCwgcmVmcmVzaEVycm9yKSxcblx0XHR9KTtcblx0fVxufVxuXG4vKipcbiAqIFdoZW4gcmVmcmVzaCBmYWlsZWRcbiAqL1xuZXhwb3J0IGNsYXNzIEp3dENvdWxkbnRSZWZyZXNoRXJyb3IgZXh0ZW5kcyBKd3RFcnJvciB7XG5cdHN0YXRpYyB0eXBlID0gJ0pXVF9DT1VMRE5UX1JFRlJFU0hfRVJST1InO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcihcblx0XHRwdWJsaWMgcmVhZG9ubHkgb3JpZ2luYWxSZXF1ZXN0OiBIdHRwUmVxdWVzdDx1bmtub3duPiB8IHVuZGVmaW5lZCxcblx0XHRwdWJsaWMgcmVhZG9ubHkgb3JpZ2luYWxFcnJvcjogdW5rbm93blxuXHQpIHtcblx0XHRzdXBlcihvcmlnaW5hbFJlcXVlc3QsIG9yaWdpbmFsRXJyb3IsIEp3dENvdWxkbnRSZWZyZXNoRXJyb3IudHlwZSk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRXJyb3JSZXNwb25zZShcblx0XHRyZXF1ZXN0OiBIdHRwUmVxdWVzdDx1bmtub3duPiB8IHVuZGVmaW5lZCxcblx0XHRyZWZyZXNoRXJyb3I6IHVua25vd25cblx0KTogSHR0cEVycm9yUmVzcG9uc2Uge1xuXHRcdHJldHVybiBuZXcgSHR0cEVycm9yUmVzcG9uc2Uoe1xuXHRcdFx0ZXJyb3I6IEp3dENvdWxkbnRSZWZyZXNoRXJyb3IuY3JlYXRlRXJyb3JFdmVudChyZXF1ZXN0LCByZWZyZXNoRXJyb3IpLFxuXHRcdH0pO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZUVycm9yRXZlbnQoXG5cdFx0cmVxdWVzdDogSHR0cFJlcXVlc3Q8dW5rbm93bj4gfCB1bmRlZmluZWQsXG5cdFx0cmVmcmVzaEVycm9yOiB1bmtub3duXG5cdCk6IEVycm9yRXZlbnQge1xuXHRcdHJldHVybiBuZXcgRXJyb3JFdmVudChKd3RDb3VsZG50UmVmcmVzaEVycm9yLnR5cGUsIHtcblx0XHRcdGVycm9yOiBuZXcgSnd0Q291bGRudFJlZnJlc2hFcnJvcihyZXF1ZXN0LCByZWZyZXNoRXJyb3IpLFxuXHRcdH0pO1xuXHR9XG59XG4iXX0=