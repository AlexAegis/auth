{"version":3,"file":"login.guard.js","sourceRoot":"/home/runner/work/auth/auth/libs/jwt/src/","sources":["lib/guards/login.guard.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAW3C,OAAO,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AACtC,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AACjD,OAAO,EAAE,gDAAgD,EAAE,MAAM,4CAA4C,CAAC;AAC9G,OAAO,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;;;AAgB/D,MAAM,OAAO,UAAU;IAGtB,YAAoC,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAF5D,4BAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAElB,CAAC;IAEhE,OAAO,CAAC,gBAAqC;;QACpD,MAAM,OAAO,SACZ,gBAAgB,aAAhB,gBAAgB,cAAhB,gBAAgB,SAChB,IAAI,CAAC,eAAe,CAAC,aAAa,0CAAE,yCAAyC,mCAC7E,gDAAgD,CAAC;QAClD,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CACvC,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE;YACrB,IAAI,CAAC,OAAO,IAAI,OAAO,EAAE;gBACxB,OAAO,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;aAC5C;iBAAM;gBACN,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC;aACnB;QACF,CAAC,CAAC,CACF,CAAC;IACH,CAAC;IAEM,WAAW,CACjB,KAA6B,EAC7B,MAA2B;QAE3B,MAAM,IAAI,GAAG,KAAK,CAAC,IAAkC,CAAC;QACtD,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,gBAAgB,CAAC,CAAC;IAC7C,CAAC;IAEM,gBAAgB,CACtB,UAAkC,EAClC,MAA2B;QAE3B,MAAM,IAAI,GAAG,UAAU,CAAC,IAAkC,CAAC;QAC3D,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,gBAAgB,CAAC,CAAC;IAC7C,CAAC;IAEM,OAAO,CACb,KAAY,EACZ,SAAuB;QAEvB,MAAM,IAAI,GAAG,KAAK,CAAC,IAAkC,CAAC;QACtD,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,gBAAgB,CAAC,CAAC;IAC7C,CAAC;;;;YA9CD,UAAU,SAAC;gBACX,UAAU,EAAE,MAAM;aAClB;;;YAfQ,eAAe","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n\tActivatedRouteSnapshot,\n\tCanActivate,\n\tCanActivateChild,\n\tCanLoad,\n\tRoute,\n\tRouterStateSnapshot,\n\tUrlSegment,\n\tUrlTree,\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { DEFAULT_JWT_REFRESH_CONFIG_DEFAULT_AUTO_IN_GUARD } from '../model/auth-core-configuration.interface';\nimport { JwtTokenService } from '../service/jwt-token.service';\n\n/**\n * This interface is for your convinience to use with Route data to see what\n * you can configure on the LoginGuard\n */\nexport interface LoginGuardData {\n\t/**\n\t * Explicitly enable or disable auto refreshing on the route.\n\t */\n\tisRefreshAllowed: boolean;\n}\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class LoginGuard implements CanActivate, CanActivateChild, CanLoad {\n\tprivate isAccessTokenValidOnce$ = this.jwtTokenService.isAccessTokenValid$.pipe(take(1));\n\n\tpublic constructor(private readonly jwtTokenService: JwtTokenService) {}\n\n\tprivate isValid(isRefreshAllowed: boolean | undefined): Observable<boolean> {\n\t\tconst allowed =\n\t\t\tisRefreshAllowed ??\n\t\t\tthis.jwtTokenService.refreshConfig?.isAutoRefreshAllowedInLoginGuardByDefault ??\n\t\t\tDEFAULT_JWT_REFRESH_CONFIG_DEFAULT_AUTO_IN_GUARD;\n\t\treturn this.isAccessTokenValidOnce$.pipe(\n\t\t\tswitchMap((isValid) => {\n\t\t\t\tif (!isValid && allowed) {\n\t\t\t\t\treturn this.jwtTokenService.manualRefresh();\n\t\t\t\t} else {\n\t\t\t\t\treturn of(isValid);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tpublic canActivate(\n\t\troute: ActivatedRouteSnapshot,\n\t\t_state: RouterStateSnapshot\n\t): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\t\tconst data = route.data as LoginGuardData | undefined;\n\t\treturn this.isValid(data?.isRefreshAllowed);\n\t}\n\n\tpublic canActivateChild(\n\t\tchildRoute: ActivatedRouteSnapshot,\n\t\t_state: RouterStateSnapshot\n\t): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\t\tconst data = childRoute.data as LoginGuardData | undefined;\n\t\treturn this.isValid(data?.isRefreshAllowed);\n\t}\n\n\tpublic canLoad(\n\t\troute: Route,\n\t\t_segments: UrlSegment[]\n\t): Observable<boolean> | Promise<boolean> | boolean {\n\t\tconst data = route.data as LoginGuardData | undefined;\n\t\treturn this.isValid(data?.isRefreshAllowed);\n\t}\n}\n"]}