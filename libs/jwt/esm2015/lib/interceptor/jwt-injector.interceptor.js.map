{"version":3,"file":"jwt-injector.interceptor.js","sourceRoot":"","sources":["../../../../../../libs/jwt/src/lib/interceptor/jwt-injector.interceptor.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAC7D,OAAO,EAAc,UAAU,EAAE,MAAM,MAAM,CAAC;AAC9C,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AACjD,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AACrD,OAAO,EAAE,qBAAqB,EAAE,MAAM,+CAA+C,CAAC;AACtF,OAAO,EAAE,cAAc,EAAE,MAAM,sCAAsC,CAAC;AACtE,OAAO,EAAE,WAAW,EAAE,MAAM,mCAAmC,CAAC;AAKhE,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EACN,+BAA+B,EAC/B,uCAAuC,EACvC,uBAAuB,EACvB,+BAA+B,GAC/B,MAAM,kCAAkC,CAAC;AAG1C,MAAM,OAAO,sBAAsB;IAIlC,YAEC,SAA2B,EAE3B,gBAAkC,EAGlC,aAAyD,EAGzD,uBAAmE;QAEnE,IAAI,CAAC,gBAAgB,mCACjB,gBAAgB,GAChB,SAAS,CACZ,CAAC;QAEF,IAAI,CAAC,uBAAuB,GAAG,aAAa;YAC3C,uBAAuB,oCACnB,uBAAuB,GACvB,aAAa,CAChB,CAAC;IACJ,CAAC;IAEM,SAAS,CACf,OAA6B,EAC7B,IAAiB;QAEjB,MAAM,YAAY,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9C,OAAO,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,IAAI,CACzD,IAAI,CAAC,CAAC,CAAC,EACP,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE;YACtB,IAAI,qBAAqB,CAAC,IAAI,CAAC,gBAAgB,EAAE,YAAY,CAAC,EAAE;gBAC/D,MAAM,KAAK,GAAG,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAClD,MAAM,6BAA6B,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;gBAClE,gCAAgC;gBAChC,IACC,QAAQ;oBACR,CAAC,CAAC,6BAA6B,IAAI,IAAI,CAAC,uBAAuB,CAAC,EAC/D;oBACD,IAAI,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;wBAC1B,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAC3B,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAC5B,IAAI,CAAC,gBAAgB,CAAC,MAAM;4BAC3B,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,QAAQ;4BACzC,CAAC,CAAC,QAAQ,CACX;qBACD,CAAC,CAAC;oBACH,IAAI,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,EAAE;wBAChD,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC;4BACrB,eAAe,EAAE,IAAI;yBACrB,CAAC,CAAC;qBACH;oBACD,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;iBAC3B;qBAAM;oBACN,OAAO,UAAU,CAChB,QAAQ,CAAC,mBAAmB,CAC3B,OAAO,EACP,6DAA6D,CAC7D,CACD,CAAC;iBACF;aACD;iBAAM;gBACN,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aAC5B;QACF,CAAC,CAAC,CACF,CAAC;IACH,CAAC;;;YAxED,UAAU;;;4CAMR,MAAM,SAAC,uBAAuB;4CAE9B,MAAM,SAAC,+BAA+B;4CAEtC,QAAQ,YACR,MAAM,SAAC,+BAA+B;4CAEtC,QAAQ,YACR,MAAM,SAAC,uCAAuC","sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { JwtError } from '../errors/jwt-error.class';\nimport { checkAgainstUrlFilter } from '../function/check-against-url-filter.function';\nimport { intoObservable } from '../function/into-observable.function';\nimport { separateUrl } from '../function/separate-url.function';\nimport {\n\tJwtConfiguration,\n\tJwtRefreshConfiguration,\n} from '../model/auth-core-configuration.interface';\nimport { JwtToken } from '../model/jwt-token.class';\nimport {\n\tDEFAULT_JWT_CONFIGURATION_TOKEN,\n\tDEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN,\n\tJWT_CONFIGURATION_TOKEN,\n\tJWT_REFRESH_CONFIGURATION_TOKEN,\n} from '../token/jwt-configuration.token';\n\n@Injectable()\nexport class JwtInjectorInterceptor implements HttpInterceptor {\n\tprivate readonly jwtConfiguration!: JwtConfiguration;\n\tprivate readonly jwtRefreshConfiguration?: JwtRefreshConfiguration<unknown, unknown>;\n\n\tpublic constructor(\n\t\t@Inject(JWT_CONFIGURATION_TOKEN)\n\t\tjwtConfig: JwtConfiguration,\n\t\t@Inject(DEFAULT_JWT_CONFIGURATION_TOKEN)\n\t\tdefaultJwtConfig: JwtConfiguration,\n\t\t@Optional()\n\t\t@Inject(JWT_REFRESH_CONFIGURATION_TOKEN)\n\t\trefreshConfig?: JwtRefreshConfiguration<unknown, unknown>,\n\t\t@Optional()\n\t\t@Inject(DEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN)\n\t\tdefaultJwtRefreshConfig?: JwtRefreshConfiguration<unknown, unknown>\n\t) {\n\t\tthis.jwtConfiguration = {\n\t\t\t...defaultJwtConfig,\n\t\t\t...jwtConfig,\n\t\t};\n\n\t\tthis.jwtRefreshConfiguration = refreshConfig &&\n\t\t\tdefaultJwtRefreshConfig && {\n\t\t\t\t...defaultJwtRefreshConfig,\n\t\t\t\t...refreshConfig,\n\t\t\t};\n\t}\n\n\tpublic intercept(\n\t\trequest: HttpRequest<unknown>,\n\t\tnext: HttpHandler\n\t): Observable<HttpEvent<unknown>> {\n\t\tconst separatedUrl = separateUrl(request.url);\n\t\treturn intoObservable(this.jwtConfiguration.getToken).pipe(\n\t\t\ttake(1),\n\t\t\tswitchMap((rawToken) => {\n\t\t\t\tif (checkAgainstUrlFilter(this.jwtConfiguration, separatedUrl)) {\n\t\t\t\t\tconst token = rawToken && JwtToken.from(rawToken);\n\t\t\t\t\tconst isAccessTokenExpiredOrInvalid = !token || token.isExpired();\n\t\t\t\t\t// If there is a token to inject\n\t\t\t\t\tif (\n\t\t\t\t\t\trawToken &&\n\t\t\t\t\t\t(!isAccessTokenExpiredOrInvalid || this.jwtRefreshConfiguration)\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet cloned = request.clone({\n\t\t\t\t\t\t\theaders: request.headers.set(\n\t\t\t\t\t\t\t\tthis.jwtConfiguration.header,\n\t\t\t\t\t\t\t\tthis.jwtConfiguration.scheme\n\t\t\t\t\t\t\t\t\t? this.jwtConfiguration.scheme + rawToken\n\t\t\t\t\t\t\t\t\t: rawToken\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (this.jwtConfiguration.handleWithCredentials) {\n\t\t\t\t\t\t\tcloned = cloned.clone({\n\t\t\t\t\t\t\t\twithCredentials: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn next.handle(cloned);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn throwError(\n\t\t\t\t\t\t\tJwtError.createErrorResponse(\n\t\t\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\t\t'Token is expired or invalid, and refresh is not configured.'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn next.handle(request);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n"]}