{"version":3,"file":"check-against-http-error-filter.function.js","sourceRoot":"../../../../libs/jwt/src/","sources":["lib/function/check-against-http-error-filter.function.ts"],"names":[],"mappings":"AAGA;;;;GAIG;AACH,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAC1C,eAAgC,EAChC,KAAwB,EACd,EAAE;;IACZ,MAAM,aAAa,GAAG,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC;IAC9D,MAAM,2BAA2B,eAChC,eAAe,CAAC,kBAAkB,0CAAE,IAAI,CAAC,aAAa,oCAAK,IAAI,CAAC;IAEjE,MAAM,2BAA2B,GAAG,QAAC,eAAe,CAAC,kBAAkB,0CAAE,IAAI,CAAC,aAAa,EAAC,CAAC;IAE7F,OAAO,2BAA2B,IAAI,2BAA2B,CAAC;AACnE,CAAC,CAAC","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { HttpErrorFilter } from '../model/auth-core-configuration.interface';\n\n/**\n * Matches the filter against an error response. Non-existend rulesets\n * automatically pass. **Empty whitelist rulesets never pass.** Empty blacklist\n * rulesets always pass.\n */\nexport const checkAgainstHttpErrorFilter = (\n\thttpErrorFilter: HttpErrorFilter,\n\terror: HttpErrorResponse\n): boolean => {\n\tconst statusMatcher = (code: number) => code === error.status;\n\tconst errorCodeWhitelistRulesPass =\n\t\thttpErrorFilter.errorCodeWhitelist?.some(statusMatcher) ?? true;\n\n\tconst errorCodeBlacklistRulesPass = !httpErrorFilter.errorCodeBlacklist?.some(statusMatcher);\n\n\treturn errorCodeWhitelistRulesPass && errorCodeBlacklistRulesPass;\n};\n"]}