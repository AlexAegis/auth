{"version":3,"file":"separate-url.function.js","sourceRoot":"","sources":["../../../../../../libs/jwt/src/lib/function/separate-url.function.ts"],"names":[],"mappings":"AA0BA;;;;GAIG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,GAAY,EAAgB,EAAE;IACzD,MAAM,QAAQ,GAAG,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,KAAK,CAAC,mCAAmC,CAAC,CAAC;IACjE,OAAO;QACN,QAAQ,EAAE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,CAAC,CAAgB;QACtC,MAAM,EAAE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,CAAC,CAAc;QAClC,IAAI,EAAE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,CAAC,CAAY;KAC9B,CAAC;AACH,CAAC,CAAC","sourcesContent":["export type UrlProtocol = string;\nexport type UrlDomain = string;\nexport type UrlPath = string;\n\n/**\n * An url separated into optional parts, the separators are not included.\n * Separator between protocol and domain is `://`, and between domain\n * and path is `/`.\n */\nexport interface SeparatedUrl {\n\t/**\n\t * @example `http`\n\t */\n\tprotocol?: UrlProtocol;\n\n\t/**\n\t * @example `localhost`\n\t */\n\tdomain?: UrlDomain;\n\n\t/**\n\t * @example `foo/bar`\n\t */\n\tpath?: UrlPath;\n}\n\n/**\n * Returns the url split into parts, without the separators.\n * Separator between protocol and domain is `://`, and between domain\n * and path is `/`.\n */\nexport const separateUrl = (url?: string): SeparatedUrl => {\n\tconst urlMatch = url?.match(/^((.*):\\/\\/)?([^/].*?)?(\\/(.*))?$/);\n\treturn {\n\t\tprotocol: urlMatch?.[2] as UrlProtocol,\n\t\tdomain: urlMatch?.[3] as UrlDomain,\n\t\tpath: urlMatch?.[5] as UrlPath,\n\t};\n};\n"]}