{"version":3,"file":"promise.predicate.js","sourceRoot":"../../../../libs/jwt/src/","sources":["lib/function/promise.predicate.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,CAAI,WAAoB,EAA6B,EAAE,CAC/E,WAAW;IACX,OAAQ,WAA0B,CAAC,IAAI,KAAK,UAAU;IACtD,OAAQ,WAA0B,CAAC,KAAK,KAAK,UAAU,CAAC","sourcesContent":["/**\n * Returns true if the object is truthy and has a `then` and a `catch` function.\n * Using `instanceof` would not be sufficient as Promises can be contructed\n * in many ways, and it's just a specification.\n */\nexport const isPromise = <T>(promiseLike: unknown): promiseLike is Promise<T> =>\n\tpromiseLike &&\n\ttypeof (promiseLike as Promise<T>).then === 'function' &&\n\ttypeof (promiseLike as Promise<T>).catch === 'function';\n"]}