{"version":3,"file":"is-timestamp-expired-now-and-when-it-is.function.js","sourceRoot":"../../../../libs/jwt/src/","sources":["lib/function/is-timestamp-expired-now-and-when-it-is.function.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAc,EAAE,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AACpD,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAEvC;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,gCAAgC,GAAG,CAAC,SAAiB,EAAuB,EAAE;IAC1F,uCAAuC;IACvC,IAAI,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;QACzC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;KAChB;SAAM;QACN,qEAAqE;QACrE,OAAO,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACtE;AACF,CAAC,CAAC","sourcesContent":["import { merge, Observable, of, timer } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\n\n/**\n * It returns an observable which emits instantly a boolean describing if the\n * timestamp is expired or not. If not, it will emit a second time when it\n * will expire.\n *\n * @param timestamp milliseconds\n */\nexport const isTimestampExpiredNowAndWhenItIs = (timestamp: number): Observable<boolean> => {\n\t// If already expired, just return that\n\tif (timestamp - new Date().getTime() < 0) {\n\t\treturn of(true);\n\t} else {\n\t\t// If not, return that is not and a timer that will emit when it does\n\t\treturn merge(of(false), timer(new Date(timestamp)).pipe(mapTo(true)));\n\t}\n};\n"]}