{"version":3,"file":"check-against-url-filter.function.js","sourceRoot":"../../../../libs/jwt/src/","sources":["lib/function/check-against-url-filter.function.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAGxD;;;;GAIG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CACpC,SAAoB,EACpB,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAgB,EAC9B,EAAE;;IACZ,MAAM,eAAe,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;IAC/C,MAAM,aAAa,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;IAC3C,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IAEvC,MAAM,0BAA0B,eAAG,SAAS,CAAC,iBAAiB,0CAAE,IAAI,CAAC,eAAe,oCAAK,IAAI,CAAC;IAE9F,MAAM,0BAA0B,GAAG,QAAC,SAAS,CAAC,iBAAiB,0CAAE,IAAI,CAAC,eAAe,EAAC,CAAC;IAEvF,MAAM,wBAAwB,eAAG,SAAS,CAAC,eAAe,0CAAE,IAAI,CAAC,aAAa,oCAAK,IAAI,CAAC;IAExF,MAAM,wBAAwB,GAAG,QAAC,SAAS,CAAC,eAAe,0CAAE,IAAI,CAAC,aAAa,EAAC,CAAC;IAEjF,MAAM,sBAAsB,eAAG,SAAS,CAAC,aAAa,0CAAE,IAAI,CAAC,WAAW,oCAAK,IAAI,CAAC;IAElF,MAAM,sBAAsB,GAAG,QAAC,SAAS,CAAC,aAAa,0CAAE,IAAI,CAAC,WAAW,EAAC,CAAC;IAE3E,OAAO,CACN,0BAA0B;QAC1B,0BAA0B;QAC1B,wBAAwB;QACxB,wBAAwB;QACxB,sBAAsB;QACtB,sBAAsB,CACtB,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { UrlFilter } from '../model/header-configuration.interface';\nimport { matchAgainst } from './match-against.function';\nimport { SeparatedUrl } from './separate-url.function';\n\n/**\n * Matches the filter against a separated url. Non-existend rulesets\n * automatically pass. **Empty whitelist rulesets never pass.** Empty blacklist\n * rulesets always pass.\n */\nexport const checkAgainstUrlFilter = (\n\turlFilter: UrlFilter,\n\t{ domain, path, protocol }: SeparatedUrl\n): boolean => {\n\tconst protocolMatcher = matchAgainst(protocol);\n\tconst domainMatcher = matchAgainst(domain);\n\tconst pathMatcher = matchAgainst(path);\n\n\tconst protocolWhitelistRulesPass = urlFilter.protocolWhitelist?.some(protocolMatcher) ?? true;\n\n\tconst protocolBlacklistRulesPass = !urlFilter.protocolBlacklist?.some(protocolMatcher);\n\n\tconst domainWhitelistRulesPass = urlFilter.domainWhitelist?.some(domainMatcher) ?? true;\n\n\tconst domainBlacklistRulesPass = !urlFilter.domainBlacklist?.some(domainMatcher);\n\n\tconst pathWhitelistRulesPass = urlFilter.pathWhitelist?.some(pathMatcher) ?? true;\n\n\tconst pathBlacklistRulesPass = !urlFilter.pathBlacklist?.some(pathMatcher);\n\n\treturn (\n\t\tprotocolWhitelistRulesPass &&\n\t\tprotocolBlacklistRulesPass &&\n\t\tdomainWhitelistRulesPass &&\n\t\tdomainBlacklistRulesPass &&\n\t\tpathWhitelistRulesPass &&\n\t\tpathBlacklistRulesPass\n\t);\n};\n"]}