{"version":3,"file":"do-jwt-refresh.function.js","sourceRoot":"","sources":["../../../../../../libs/jwt/src/lib/function/do-jwt-refresh.function.ts"],"names":[],"mappings":"AAAA,OAAO,EAAe,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAEhE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAKxE,OAAO,EAAE,gBAAgB,EAAE,MAAM,+BAA+B,CAAC;AACjE,OAAO,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAC;AAE3D,MAAM,CAAC,MAAM,YAAY,GAAG,CAC3B,IAAiB,EACjB,WAAgB,EAChB,uBAA0D,EAC1D,OAAmD,EACnD,cAAwE,EACtD,EAAE;;IACpB,MAAM,cAAc,GAAG,IAAI,WAAW,OACrC,uBAAuB,CAAC,MAAM,mCAAI,MAAM,EACxC,uBAAuB,CAAC,UAAU,EAClC,WAAW,EACX,gBAAgB,CAAC,uBAAuB,CAAC,sBAAsB,CAAC,CAChE,CAAC;IAEF,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CACtC,MAAM,CAAC,cAAc,CAAC,EACtB,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,uBAAuB,CAAC,wBAAwB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAClF,GAAG,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,EACrF,QAAQ,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,EAC9D,UAAU,CAAC,OAAO,CAAC,CACnB,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, filter, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n\tJwtRefreshConfiguration,\n\tJwtRefreshResponse,\n} from '../model/auth-core-configuration.interface';\nimport { callWhenFunction } from './call-when-function.function';\nimport { isHttpResponse } from './http-response.predicate';\n\nexport const doJwtRefresh = <Req, Res, Ret>(\n\tnext: HttpHandler,\n\trequestBody: Req,\n\tjwtRefreshConfiguration: JwtRefreshConfiguration<Req, Res>,\n\tonError: (refreshError: unknown) => Observable<Ret>,\n\toriginalAction: (refreshResponse: JwtRefreshResponse) => Observable<Ret>\n): Observable<Ret> => {\n\tconst refreshRequest = new HttpRequest<Req>(\n\t\tjwtRefreshConfiguration.method ?? 'POST',\n\t\tjwtRefreshConfiguration.refreshUrl,\n\t\trequestBody,\n\t\tcallWhenFunction(jwtRefreshConfiguration.refreshRequestInitials)\n\t);\n\n\treturn next.handle(refreshRequest).pipe(\n\t\tfilter(isHttpResponse),\n\t\tmap((response) => jwtRefreshConfiguration.transformRefreshResponse(response.body)),\n\t\ttap((refreshResponse) => jwtRefreshConfiguration.setRefreshedTokens(refreshResponse)),\n\t\tmergeMap((refreshResponse) => originalAction(refreshResponse)),\n\t\tcatchError(onError)\n\t);\n};\n"]}