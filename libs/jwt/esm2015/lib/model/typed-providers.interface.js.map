{"version":3,"file":"typed-providers.interface.js","sourceRoot":"/home/runner/work/auth/auth/libs/jwt/src/","sources":["lib/model/typed-providers.interface.ts"],"names":[],"mappings":"","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * This are some simplistic typed versions of providers. Until variadic generics\n * land, full proper typings cannot be implemented\n */\nimport {\n\tClassSansProvider,\n\tConstructorSansProvider,\n\tExistingSansProvider,\n\tFactorySansProvider,\n\tInjectionToken,\n\tType,\n\tValueSansProvider,\n} from '@angular/core';\n\nexport declare interface TypedValueProvider<T> extends TypedValueSansProvider<T> {\n\tprovide: Type<T | T[]> | InjectionToken<T | T[]>;\n\tmulti?: boolean;\n}\n\nexport declare interface TypedValueSansProvider<T> extends ValueSansProvider {\n\tuseValue: T;\n}\n\nexport declare type TypedTypeProvider<T> = Type<T>;\nexport declare interface TypedClassProvider<T> extends TypedClassSansProvider<T> {\n\tprovide: Type<T | T[]> | InjectionToken<T | T[]>;\n\tmulti?: boolean;\n}\nexport declare interface TypedClassSansProvider<T> extends ClassSansProvider {\n\tuseClass: Type<T>;\n}\nexport declare interface TypedConstructorProvider<T> extends TypedConstructorSansProvider<T> {\n\tprovide: Type<T | T[]>;\n\tmulti?: boolean;\n}\nexport declare interface TypedConstructorSansProvider<T> extends ConstructorSansProvider {\n\tdeps?: T[]; // TODO\n}\n\nexport declare interface TypedExistingProvider<T> extends TypedExistingSansProvider<T> {\n\tprovide: Type<T | T[]>;\n\tmulti?: boolean;\n}\n\nexport declare interface TypedExistingSansProvider<T> extends ExistingSansProvider {\n\tuseExisting: InjectionToken<T | T[]>;\n}\n\nexport declare interface TypedFactoryProvider<\n\tT,\n\tA = any,\n\tB = any,\n\tC = any,\n\tD = any,\n\tE = any,\n\tF = any,\n\tG = any,\n\tH = any,\n\tI = any,\n\tJ = any,\n\tK = any,\n\tL = any,\n\tM = any,\n\tN = any,\n\tO = any,\n\tP = any,\n\tQ = any,\n\tR = any,\n\tS = any,\n\tU = any,\n\tV = any,\n\tW = any,\n\tX = any,\n\tY = any,\n\tZ = any\n> extends TypedFactorySansProvider<\n\t\tT,\n\t\tA,\n\t\tB,\n\t\tC,\n\t\tD,\n\t\tE,\n\t\tF,\n\t\tG,\n\t\tH,\n\t\tI,\n\t\tJ,\n\t\tK,\n\t\tL,\n\t\tM,\n\t\tN,\n\t\tO,\n\t\tP,\n\t\tQ,\n\t\tR,\n\t\tS,\n\t\tU,\n\t\tV,\n\t\tW,\n\t\tX,\n\t\tY,\n\t\tZ\n\t> {\n\tprovide: Type<T | T[]>;\n\tmulti?: boolean;\n}\n\nexport declare interface TypedFactorySansProvider<\n\tT,\n\tA = any,\n\tB = any,\n\tC = any,\n\tD = any,\n\tE = any,\n\tF = any,\n\tG = any,\n\tH = any,\n\tI = any,\n\tJ = any,\n\tK = any,\n\tL = any,\n\tM = any,\n\tN = any,\n\tO = any,\n\tP = any,\n\tQ = any,\n\tR = any,\n\tS = any,\n\tU = any,\n\tV = any,\n\tW = any,\n\tX = any,\n\tY = any,\n\tZ = any\n> extends FactorySansProvider {\n\tuseFactory: (\n\t\ta: A,\n\t\tb: B,\n\t\tc: C,\n\t\td: D,\n\t\te: E,\n\t\tf: F,\n\t\tg: G,\n\t\th: H,\n\t\ti: I,\n\t\tj: J,\n\t\tk: K,\n\t\tl: L,\n\t\tm: M,\n\t\tn: N,\n\t\to: O,\n\t\tp: P,\n\t\tq: Q,\n\t\tr: R,\n\t\ts: S,\n\t\tu: U,\n\t\tv: V,\n\t\tw: W,\n\t\tx: X,\n\t\ty: Y,\n\t\tz: Z\n\t) => T;\n\tdeps?: [\n\t\tType<A>?,\n\t\tType<B>?,\n\t\tType<C>?,\n\t\tType<D>?,\n\t\tType<E>?,\n\t\tType<F>?,\n\t\tType<G>?,\n\t\tType<H>?,\n\t\tType<I>?,\n\t\tType<J>?,\n\t\tType<K>?,\n\t\tType<L>?,\n\t\tType<M>?,\n\t\tType<N>?,\n\t\tType<O>?,\n\t\tType<P>?,\n\t\tType<Q>?,\n\t\tType<R>?,\n\t\tType<S>?,\n\t\tType<U>?,\n\t\tType<V>?,\n\t\tType<W>?,\n\t\tType<X>?,\n\t\tType<Y>?,\n\t\tType<Z>?\n\t];\n}\n\nexport declare type TypedProvider<\n\tT extends Record<string, any> | Type<any> | InjectionToken<any> = Record<string, any>,\n\tA = any,\n\tB = any,\n\tC = any,\n\tD = any,\n\tE = any,\n\tF = any,\n\tG = any,\n\tH = any,\n\tI = any,\n\tJ = any,\n\tK = any,\n\tL = any,\n\tM = any,\n\tN = any,\n\tO = any,\n\tP = any,\n\tQ = any,\n\tR = any,\n\tS = any,\n\tU = any,\n\tV = any,\n\tW = any,\n\tX = any,\n\tY = any,\n\tZ = any\n> = TypedClassProvider<T> &\n\tTypedValueProvider<T> &\n\tTypedExistingProvider<T> &\n\tTypedFactoryProvider<\n\t\tT,\n\t\tA,\n\t\tB,\n\t\tC,\n\t\tD,\n\t\tE,\n\t\tF,\n\t\tG,\n\t\tH,\n\t\tI,\n\t\tJ,\n\t\tK,\n\t\tL,\n\t\tM,\n\t\tN,\n\t\tO,\n\t\tP,\n\t\tQ,\n\t\tR,\n\t\tS,\n\t\tU,\n\t\tV,\n\t\tW,\n\t\tX,\n\t\tY,\n\t\tZ\n\t>;\n"]}