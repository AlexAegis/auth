{"version":3,"file":"jwt-token.service.js","sourceRoot":"../../../../libs/jwt/src/","sources":["lib/service/jwt-token.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpHandler } from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { JwtCouldntRefreshError } from '../errors/jwt-error.class';\nimport { handleJwtError } from '../function/handle-jwt-error.function';\nimport { intoObservable } from '../function/into-observable.function';\nimport { isNotNullish } from '../function/is-not-nullish.predicate';\nimport { isUnixTimestampExpiredNowAndWhenItIs } from '../function/is-unix-timestamp-expired-now-and-when-it-is.function';\nimport { isString } from '../function/string.predicate';\nimport { tryJwtRefresh } from '../function/try-jwt-refresh.function';\nimport {\n\tJwtConfiguration,\n\tJwtRefreshConfiguration,\n} from '../model/auth-core-configuration.interface';\nimport { JwtToken } from '../model/jwt-token.class';\nimport {\n\tDEFAULT_JWT_CONFIGURATION_TOKEN,\n\tDEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN,\n\tJWT_CONFIGURATION_TOKEN,\n\tJWT_REFRESH_CONFIGURATION_TOKEN,\n} from '../token/jwt-configuration.token';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class JwtTokenService<\n\tClaims = Record<string | number, unknown>,\n\tRefreshClaims = Record<string | number, unknown>,\n\tRefreshRequest = Record<string | number, unknown>,\n\tRefreshResponse = Record<string | number, unknown>\n> {\n\tpublic readonly config: JwtConfiguration = {\n\t\t...this.rawDefaultConfig,\n\t\t...this.rawConfig,\n\t};\n\n\tpublic readonly refreshConfig?: JwtRefreshConfiguration<RefreshRequest, RefreshResponse> =\n\t\tthis.rawDefaultRefreshConfig && this.rawRefreshConfig\n\t\t\t? {\n\t\t\t\t\t...this.rawDefaultRefreshConfig,\n\t\t\t\t\t...this.rawRefreshConfig,\n\t\t\t  }\n\t\t\t: undefined;\n\n\t/**\n\t * Consider restricting getToken to observables only so things can be cached\n\t */\n\tpublic readonly rawAccessToken$ = intoObservable(this.config.getToken);\n\n\tpublic readonly rawRefreshToken$ = this.refreshConfig?.getRefreshToken\n\t\t? intoObservable(this.refreshConfig.getRefreshToken)\n\t\t: of(null);\n\n\tpublic readonly accessToken$ = this.rawAccessToken$.pipe(\n\t\tmap((token) => {\n\t\t\tif (isString(token)) {\n\t\t\t\tconst jwtToken = JwtToken.from<Claims>(token);\n\t\t\t\tif (!jwtToken) {\n\t\t\t\t\tthrow new Error('Non-valid token observed');\n\t\t\t\t} else {\n\t\t\t\t\treturn jwtToken;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t})\n\t);\n\n\tpublic readonly refreshToken$ = this.rawRefreshToken$.pipe(\n\t\tmap((refreshToken) => {\n\t\t\tif (isString(refreshToken)) {\n\t\t\t\tconst jwtToken = JwtToken.from<RefreshClaims>(refreshToken);\n\t\t\t\tif (!jwtToken) {\n\t\t\t\t\tthrow new Error('Non-valid token observed');\n\t\t\t\t} else {\n\t\t\t\t\treturn jwtToken;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t})\n\t);\n\n\tpublic readonly accessTokenHeader$ = this.accessToken$.pipe(\n\t\tmap((token) => token?.header ?? null)\n\t);\n\n\tpublic readonly accessTokenPayload$ = this.accessToken$.pipe(\n\t\tmap((token) => token?.payload ?? null)\n\t);\n\n\tpublic readonly refreshTokenHeader$ = this.refreshToken$.pipe(\n\t\tmap((token) => token?.header ?? null)\n\t);\n\n\tpublic readonly refreshTokenPayload$ = this.refreshToken$.pipe(\n\t\tmap((token) => token?.payload ?? null)\n\t);\n\n\tpublic readonly isAccessTokenExpired$ = this.accessToken$.pipe(\n\t\tswitchMap((token) =>\n\t\t\ttoken ? isUnixTimestampExpiredNowAndWhenItIs(token.payload.exp) : of(null)\n\t\t)\n\t);\n\n\tpublic readonly isRefreshTokenExpired$ = this.refreshToken$.pipe(\n\t\tswitchMap((token) =>\n\t\t\ttoken ? isUnixTimestampExpiredNowAndWhenItIs(token.payload.exp) : of(null)\n\t\t)\n\t);\n\n\tpublic readonly isAccessTokenValid$ = this.isAccessTokenExpired$.pipe(\n\t\tmap((isExpired) => isNotNullish(isExpired) && !isExpired)\n\t);\n\n\tpublic readonly isRefreshTokenValid$ = this.isRefreshTokenExpired$.pipe(\n\t\tmap((isExpired) => isNotNullish(isExpired) && !isExpired)\n\t);\n\n\tpublic constructor(\n\t\tprivate readonly httpHandler: HttpHandler,\n\t\t@Inject(JWT_CONFIGURATION_TOKEN)\n\t\tprivate readonly rawConfig: JwtConfiguration,\n\t\t@Inject(DEFAULT_JWT_CONFIGURATION_TOKEN)\n\t\tprivate readonly rawDefaultConfig: JwtConfiguration,\n\t\t@Inject(DEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN)\n\t\t@Optional()\n\t\tprivate readonly rawDefaultRefreshConfig?: JwtRefreshConfiguration<\n\t\t\tRefreshRequest,\n\t\t\tRefreshResponse\n\t\t>,\n\t\t@Inject(JWT_REFRESH_CONFIGURATION_TOKEN)\n\t\t@Optional()\n\t\tprivate readonly rawRefreshConfig?: JwtRefreshConfiguration<\n\t\t\tRefreshRequest,\n\t\t\tRefreshResponse\n\t\t>,\n\t\t@Optional() private readonly router?: Router\n\t) {}\n\n\t/**\n\t * Does a token refresh. Emits false if it failed, or true if succeeded.\n\t */\n\tpublic manualRefresh(): Observable<boolean> {\n\t\tif (this.refreshConfig) {\n\t\t\treturn tryJwtRefresh(\n\t\t\t\tthis.httpHandler,\n\t\t\t\t'Access token not valid on guard activation',\n\t\t\t\tthis.refreshConfig,\n\t\t\t\t(refreshError) =>\n\t\t\t\t\thandleJwtError<RefreshRequest, RefreshResponse>(\n\t\t\t\t\t\tJwtCouldntRefreshError.createErrorResponse(undefined, refreshError),\n\t\t\t\t\t\tthis.config,\n\t\t\t\t\t\tthis.refreshConfig,\n\t\t\t\t\t\tthis.router\n\t\t\t\t\t).pipe(catchError(() => of(false))),\n\t\t\t\t() => of(true)\n\t\t\t);\n\t\t} else {\n\t\t\treturn of(false);\n\t\t}\n\t}\n}\n"]}