import { throwError } from 'rxjs';
import { switchMap, take } from 'rxjs/operators';
import { checkAgainstHttpErrorFilter } from './check-against-http-error-filter.function';
import { doJwtRefresh } from './do-jwt-refresh.function';
import { intoObservable } from './into-observable.function';
export const tryJwtRefresh = (next, originalError, jwtRefreshConfiguration, refreshLock, onError, originalAction) => {
    const isRefreshAllowed = typeof originalError === 'string' ||
        checkAgainstHttpErrorFilter(jwtRefreshConfiguration, originalError);
    if (isRefreshAllowed) {
        return intoObservable(jwtRefreshConfiguration.createRefreshRequestBody).pipe(take(1), switchMap((requestBody) => {
            if (requestBody) {
                return doJwtRefresh(next, requestBody, jwtRefreshConfiguration, refreshLock, onError, originalAction);
            }
            else {
                return onError(originalError);
            }
        }));
    }
    else {
        return throwError(originalError);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ5LWp3dC1yZWZyZXNoLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9qd3Qvc3JjL2xpYi9mdW5jdGlvbi90cnktand0LXJlZnJlc2guZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUErQixVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUtqRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUN6RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTVELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUM1QixJQUFpQixFQUNqQixhQUF5QyxFQUN6Qyx1QkFBMEQsRUFDMUQsV0FBcUMsRUFDckMsT0FBbUQsRUFDbkQsY0FBd0UsRUFDdEQsRUFBRTtJQUNwQixNQUFNLGdCQUFnQixHQUNyQixPQUFPLGFBQWEsS0FBSyxRQUFRO1FBQ2pDLDJCQUEyQixDQUFDLHVCQUF1QixFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBRXJFLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztRQUN0QixPQUFPLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLElBQUksQ0FDM0UsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLFNBQVMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3pCLElBQUksV0FBVyxFQUFFLENBQUM7Z0JBQ2pCLE9BQU8sWUFBWSxDQUNsQixJQUFJLEVBQ0osV0FBVyxFQUNYLHVCQUF1QixFQUN2QixXQUFXLEVBQ1gsT0FBTyxFQUNQLGNBQWMsQ0FDZCxDQUFDO1lBQ0gsQ0FBQztpQkFBTSxDQUFDO2dCQUNQLE9BQU8sT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQy9CLENBQUM7UUFDRixDQUFDLENBQUMsQ0FDRixDQUFDO0lBQ0gsQ0FBQztTQUFNLENBQUM7UUFDUCxPQUFPLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNsQyxDQUFDO0FBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UsIEh0dHBIYW5kbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuXHRKd3RSZWZyZXNoQ29uZmlndXJhdGlvbixcblx0Snd0UmVmcmVzaFJlc3BvbnNlLFxufSBmcm9tICcuLi9tb2RlbC9hdXRoLWNvcmUtY29uZmlndXJhdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgY2hlY2tBZ2FpbnN0SHR0cEVycm9yRmlsdGVyIH0gZnJvbSAnLi9jaGVjay1hZ2FpbnN0LWh0dHAtZXJyb3ItZmlsdGVyLmZ1bmN0aW9uJztcbmltcG9ydCB7IGRvSnd0UmVmcmVzaCB9IGZyb20gJy4vZG8tand0LXJlZnJlc2guZnVuY3Rpb24nO1xuaW1wb3J0IHsgaW50b09ic2VydmFibGUgfSBmcm9tICcuL2ludG8tb2JzZXJ2YWJsZS5mdW5jdGlvbic7XG5cbmV4cG9ydCBjb25zdCB0cnlKd3RSZWZyZXNoID0gPFJlcSwgUmVzLCBSZXQ+KFxuXHRuZXh0OiBIdHRwSGFuZGxlcixcblx0b3JpZ2luYWxFcnJvcjogc3RyaW5nIHwgSHR0cEVycm9yUmVzcG9uc2UsXG5cdGp3dFJlZnJlc2hDb25maWd1cmF0aW9uOiBKd3RSZWZyZXNoQ29uZmlndXJhdGlvbjxSZXEsIFJlcz4sXG5cdHJlZnJlc2hMb2NrOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4sXG5cdG9uRXJyb3I6IChyZWZyZXNoRXJyb3I6IHVua25vd24pID0+IE9ic2VydmFibGU8UmV0Pixcblx0b3JpZ2luYWxBY3Rpb246IChyZWZyZXNoUmVzcG9uc2U6IEp3dFJlZnJlc2hSZXNwb25zZSkgPT4gT2JzZXJ2YWJsZTxSZXQ+LFxuKTogT2JzZXJ2YWJsZTxSZXQ+ID0+IHtcblx0Y29uc3QgaXNSZWZyZXNoQWxsb3dlZCA9XG5cdFx0dHlwZW9mIG9yaWdpbmFsRXJyb3IgPT09ICdzdHJpbmcnIHx8XG5cdFx0Y2hlY2tBZ2FpbnN0SHR0cEVycm9yRmlsdGVyKGp3dFJlZnJlc2hDb25maWd1cmF0aW9uLCBvcmlnaW5hbEVycm9yKTtcblxuXHRpZiAoaXNSZWZyZXNoQWxsb3dlZCkge1xuXHRcdHJldHVybiBpbnRvT2JzZXJ2YWJsZShqd3RSZWZyZXNoQ29uZmlndXJhdGlvbi5jcmVhdGVSZWZyZXNoUmVxdWVzdEJvZHkpLnBpcGUoXG5cdFx0XHR0YWtlKDEpLFxuXHRcdFx0c3dpdGNoTWFwKChyZXF1ZXN0Qm9keSkgPT4ge1xuXHRcdFx0XHRpZiAocmVxdWVzdEJvZHkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZG9Kd3RSZWZyZXNoKFxuXHRcdFx0XHRcdFx0bmV4dCxcblx0XHRcdFx0XHRcdHJlcXVlc3RCb2R5LFxuXHRcdFx0XHRcdFx0and0UmVmcmVzaENvbmZpZ3VyYXRpb24sXG5cdFx0XHRcdFx0XHRyZWZyZXNoTG9jayxcblx0XHRcdFx0XHRcdG9uRXJyb3IsXG5cdFx0XHRcdFx0XHRvcmlnaW5hbEFjdGlvbixcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBvbkVycm9yKG9yaWdpbmFsRXJyb3IpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KSxcblx0XHQpO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiB0aHJvd0Vycm9yKG9yaWdpbmFsRXJyb3IpO1xuXHR9XG59O1xuIl19