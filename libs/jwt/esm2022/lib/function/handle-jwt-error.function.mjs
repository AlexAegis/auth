import { throwError } from 'rxjs';
import { JwtCannotRefreshError, JwtCouldntRefreshError, JwtError } from '../errors/jwt-error.class';
import { handleJwtFailure } from './handle-jwt-failure.function';
import { isNotNullish } from './is-not-nullish.predicate';
export const handleJwtError = (wrappedError, jwtConfiguration, jwtRefreshConfiguration, router) => {
    const error = wrappedError.error?.error;
    if (error instanceof JwtCannotRefreshError || error instanceof JwtCouldntRefreshError) {
        if (jwtRefreshConfiguration && isNotNullish(jwtRefreshConfiguration.onFailure)) {
            // Unset accesstoken
            // jwtRefreshConfiguration.setRefreshedTokens({ accessToken: undefined });
            handleJwtFailure(jwtRefreshConfiguration.onFailure, error, router, jwtRefreshConfiguration.onFailureRedirectParameters);
        }
        // Rethrow the inner error, so observers of the user can see it
        return throwError(error);
    }
    else if (error instanceof JwtError) {
        if (isNotNullish(jwtConfiguration.onFailure)) {
            handleJwtFailure(jwtConfiguration.onFailure, error, router, jwtConfiguration.onFailureRedirectParameters);
        }
        return throwError(error);
    }
    else {
        // Other errors are left untreated
        return throwError(wrappedError);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlLWp3dC1lcnJvci5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvand0L3NyYy9saWIvZnVuY3Rpb24vaGFuZGxlLWp3dC1lcnJvci5mdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQWMsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxzQkFBc0IsRUFBRSxRQUFRLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUtwRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFMUQsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQzdCLFlBTW1GLEVBQ25GLGdCQUFrQyxFQUNsQyx1QkFBa0YsRUFDbEYsTUFBZSxFQUNLLEVBQUU7SUFDdEIsTUFBTSxLQUFLLEdBQ1YsWUFBWSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7SUFFM0IsSUFBSSxLQUFLLFlBQVkscUJBQXFCLElBQUksS0FBSyxZQUFZLHNCQUFzQixFQUFFO1FBQ3RGLElBQUksdUJBQXVCLElBQUksWUFBWSxDQUFDLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQy9FLG9CQUFvQjtZQUNwQiwwRUFBMEU7WUFFMUUsZ0JBQWdCLENBQ2YsdUJBQXVCLENBQUMsU0FBUyxFQUNqQyxLQUFLLEVBQ0wsTUFBTSxFQUNOLHVCQUF1QixDQUFDLDJCQUEyQixDQUNuRCxDQUFDO1NBQ0Y7UUFDRCwrREFBK0Q7UUFDL0QsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDekI7U0FBTSxJQUFJLEtBQUssWUFBWSxRQUFRLEVBQUU7UUFDckMsSUFBSSxZQUFZLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDN0MsZ0JBQWdCLENBQ2YsZ0JBQWdCLENBQUMsU0FBUyxFQUMxQixLQUFLLEVBQ0wsTUFBTSxFQUNOLGdCQUFnQixDQUFDLDJCQUEyQixDQUM1QyxDQUFDO1NBQ0Y7UUFDRCxPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN6QjtTQUFNO1FBQ04sa0NBQWtDO1FBQ2xDLE9BQU8sVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQ2hDO0FBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSnd0Q2Fubm90UmVmcmVzaEVycm9yLCBKd3RDb3VsZG50UmVmcmVzaEVycm9yLCBKd3RFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9qd3QtZXJyb3IuY2xhc3MnO1xuaW1wb3J0IHtcblx0Snd0Q29uZmlndXJhdGlvbixcblx0Snd0UmVmcmVzaENvbmZpZ3VyYXRpb24sXG59IGZyb20gJy4uL21vZGVsL2F1dGgtY29yZS1jb25maWd1cmF0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBoYW5kbGVKd3RGYWlsdXJlIH0gZnJvbSAnLi9oYW5kbGUtand0LWZhaWx1cmUuZnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNOb3ROdWxsaXNoIH0gZnJvbSAnLi9pcy1ub3QtbnVsbGlzaC5wcmVkaWNhdGUnO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlSnd0RXJyb3IgPSA8UmVmcmVzaFJlcXVlc3QgPSB1bmtub3duLCBSZWZyZXNoUmVzcG9uc2UgPSB1bmtub3duPihcblx0d3JhcHBlZEVycm9yOlxuXHRcdHwgKE9taXQ8SHR0cEVycm9yUmVzcG9uc2UsICdlcnJvcic+ICYge1xuXHRcdFx0XHRlcnJvcj86IE9taXQ8RXJyb3JFdmVudCwgJ2Vycm9yJz4gJiB7XG5cdFx0XHRcdFx0ZXJyb3I6IEp3dEVycm9yIHwgSnd0Q2Fubm90UmVmcmVzaEVycm9yIHwgSnd0Q291bGRudFJlZnJlc2hFcnJvcjtcblx0XHRcdFx0fTtcblx0XHQgIH0pXG5cdFx0fCB7IGVycm9yPzogeyBlcnJvcjogSnd0RXJyb3IgfCBKd3RDYW5ub3RSZWZyZXNoRXJyb3IgfCBKd3RDb3VsZG50UmVmcmVzaEVycm9yIH0gfSxcblx0and0Q29uZmlndXJhdGlvbjogSnd0Q29uZmlndXJhdGlvbixcblx0and0UmVmcmVzaENvbmZpZ3VyYXRpb24/OiBKd3RSZWZyZXNoQ29uZmlndXJhdGlvbjxSZWZyZXNoUmVxdWVzdCwgUmVmcmVzaFJlc3BvbnNlPixcblx0cm91dGVyPzogUm91dGVyXG4pOiBPYnNlcnZhYmxlPG5ldmVyPiA9PiB7XG5cdGNvbnN0IGVycm9yOiB1bmRlZmluZWQgfCBKd3RFcnJvciB8IEp3dENhbm5vdFJlZnJlc2hFcnJvciB8IEp3dENvdWxkbnRSZWZyZXNoRXJyb3IgPVxuXHRcdHdyYXBwZWRFcnJvci5lcnJvcj8uZXJyb3I7XG5cblx0aWYgKGVycm9yIGluc3RhbmNlb2YgSnd0Q2Fubm90UmVmcmVzaEVycm9yIHx8IGVycm9yIGluc3RhbmNlb2YgSnd0Q291bGRudFJlZnJlc2hFcnJvcikge1xuXHRcdGlmIChqd3RSZWZyZXNoQ29uZmlndXJhdGlvbiAmJiBpc05vdE51bGxpc2goand0UmVmcmVzaENvbmZpZ3VyYXRpb24ub25GYWlsdXJlKSkge1xuXHRcdFx0Ly8gVW5zZXQgYWNjZXNzdG9rZW5cblx0XHRcdC8vIGp3dFJlZnJlc2hDb25maWd1cmF0aW9uLnNldFJlZnJlc2hlZFRva2Vucyh7IGFjY2Vzc1Rva2VuOiB1bmRlZmluZWQgfSk7XG5cblx0XHRcdGhhbmRsZUp3dEZhaWx1cmUoXG5cdFx0XHRcdGp3dFJlZnJlc2hDb25maWd1cmF0aW9uLm9uRmFpbHVyZSxcblx0XHRcdFx0ZXJyb3IsXG5cdFx0XHRcdHJvdXRlcixcblx0XHRcdFx0and0UmVmcmVzaENvbmZpZ3VyYXRpb24ub25GYWlsdXJlUmVkaXJlY3RQYXJhbWV0ZXJzXG5cdFx0XHQpO1xuXHRcdH1cblx0XHQvLyBSZXRocm93IHRoZSBpbm5lciBlcnJvciwgc28gb2JzZXJ2ZXJzIG9mIHRoZSB1c2VyIGNhbiBzZWUgaXRcblx0XHRyZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG5cdH0gZWxzZSBpZiAoZXJyb3IgaW5zdGFuY2VvZiBKd3RFcnJvcikge1xuXHRcdGlmIChpc05vdE51bGxpc2goand0Q29uZmlndXJhdGlvbi5vbkZhaWx1cmUpKSB7XG5cdFx0XHRoYW5kbGVKd3RGYWlsdXJlKFxuXHRcdFx0XHRqd3RDb25maWd1cmF0aW9uLm9uRmFpbHVyZSxcblx0XHRcdFx0ZXJyb3IsXG5cdFx0XHRcdHJvdXRlcixcblx0XHRcdFx0and0Q29uZmlndXJhdGlvbi5vbkZhaWx1cmVSZWRpcmVjdFBhcmFtZXRlcnNcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aHJvd0Vycm9yKGVycm9yKTtcblx0fSBlbHNlIHtcblx0XHQvLyBPdGhlciBlcnJvcnMgYXJlIGxlZnQgdW50cmVhdGVkXG5cdFx0cmV0dXJuIHRocm93RXJyb3Iod3JhcHBlZEVycm9yKTtcblx0fVxufTtcbiJdfQ==