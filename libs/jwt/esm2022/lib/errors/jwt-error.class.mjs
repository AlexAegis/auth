import { HttpErrorResponse } from '@angular/common/http';
export class JwtError extends Error {
    static { this.type = 'JWT_ERROR'; }
    constructor(originalRequest, originalError, message = JwtError.type) {
        super(message);
        this.originalRequest = originalRequest;
        this.originalError = originalError;
    }
    static createErrorResponse(request, refreshError) {
        return new HttpErrorResponse({
            error: JwtError.createErrorEvent(request, refreshError),
        });
    }
    static createErrorEvent(request, refreshError) {
        return new ErrorEvent(JwtError.type, {
            error: new JwtError(request, refreshError),
        });
    }
}
/**
 * When both access and refresh tokens are either invalid or expired!
 */
export class JwtCannotRefreshError extends JwtError {
    static { this.type = 'JWT_CANNOT_REFRESH_ERROR'; }
    constructor(originalRequest, originalError) {
        super(originalRequest, originalError, JwtCannotRefreshError.type);
        this.originalRequest = originalRequest;
        this.originalError = originalError;
    }
    static createErrorResponse(request, refreshError) {
        return new HttpErrorResponse({
            error: JwtCannotRefreshError.createErrorEvent(request, refreshError),
        });
    }
    static createErrorEvent(request, refreshError) {
        return new ErrorEvent(JwtCannotRefreshError.type, {
            error: new JwtCannotRefreshError(request, refreshError),
        });
    }
}
/**
 * When refresh failed
 */
export class JwtCouldntRefreshError extends JwtError {
    static { this.type = 'JWT_COULDNT_REFRESH_ERROR'; }
    constructor(originalRequest, originalError) {
        super(originalRequest, originalError, JwtCouldntRefreshError.type);
        this.originalRequest = originalRequest;
        this.originalError = originalError;
    }
    static createErrorResponse(request, refreshError) {
        return new HttpErrorResponse({
            error: JwtCouldntRefreshError.createErrorEvent(request, refreshError),
        });
    }
    static createErrorEvent(request, refreshError) {
        return new ErrorEvent(JwtCouldntRefreshError.type, {
            error: new JwtCouldntRefreshError(request, refreshError),
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LWVycm9yLmNsYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9qd3Qvc3JjL2xpYi9lcnJvcnMvand0LWVycm9yLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBRXRFLE1BQU0sT0FBTyxRQUFTLFNBQVEsS0FBSzthQUMzQixTQUFJLEdBQUcsV0FBVyxDQUFDO0lBRTFCLFlBQ2lCLGVBQWlELEVBQ2pELGFBQXNCLEVBQ3RDLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSTtRQUV2QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFKQyxvQkFBZSxHQUFmLGVBQWUsQ0FBa0M7UUFDakQsa0JBQWEsR0FBYixhQUFhLENBQVM7SUFJdkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxtQkFBbUIsQ0FDekIsT0FBeUMsRUFDekMsWUFBcUI7UUFFckIsT0FBTyxJQUFJLGlCQUFpQixDQUFDO1lBQzVCLEtBQUssRUFBRSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQztTQUN2RCxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLGdCQUFnQixDQUN0QixPQUF5QyxFQUN6QyxZQUFxQjtRQUVyQixPQUFPLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7WUFDcEMsS0FBSyxFQUFFLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUM7U0FDMUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQzs7QUFHRjs7R0FFRztBQUNILE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxRQUFRO2FBQzNDLFNBQUksR0FBRywwQkFBMEIsQ0FBQztJQUV6QyxZQUNpQixlQUFpRCxFQUNqRCxhQUFzQjtRQUV0QyxLQUFLLENBQUMsZUFBZSxFQUFFLGFBQWEsRUFBRSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUhsRCxvQkFBZSxHQUFmLGVBQWUsQ0FBa0M7UUFDakQsa0JBQWEsR0FBYixhQUFhLENBQVM7SUFHdkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxtQkFBbUIsQ0FDekIsT0FBeUMsRUFDekMsWUFBcUI7UUFFckIsT0FBTyxJQUFJLGlCQUFpQixDQUFDO1lBQzVCLEtBQUssRUFBRSxxQkFBcUIsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDO1NBQ3BFLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsZ0JBQWdCLENBQ3RCLE9BQXlDLEVBQ3pDLFlBQXFCO1FBRXJCLE9BQU8sSUFBSSxVQUFVLENBQUMscUJBQXFCLENBQUMsSUFBSSxFQUFFO1lBQ2pELEtBQUssRUFBRSxJQUFJLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUM7U0FDdkQsQ0FBQyxDQUFDO0lBQ0osQ0FBQzs7QUFHRjs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxRQUFRO2FBQzVDLFNBQUksR0FBRywyQkFBMkIsQ0FBQztJQUUxQyxZQUNpQixlQUFpRCxFQUNqRCxhQUFzQjtRQUV0QyxLQUFLLENBQUMsZUFBZSxFQUFFLGFBQWEsRUFBRSxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUhuRCxvQkFBZSxHQUFmLGVBQWUsQ0FBa0M7UUFDakQsa0JBQWEsR0FBYixhQUFhLENBQVM7SUFHdkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxtQkFBbUIsQ0FDekIsT0FBeUMsRUFDekMsWUFBcUI7UUFFckIsT0FBTyxJQUFJLGlCQUFpQixDQUFDO1lBQzVCLEtBQUssRUFBRSxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDO1NBQ3JFLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsZ0JBQWdCLENBQ3RCLE9BQXlDLEVBQ3pDLFlBQXFCO1FBRXJCLE9BQU8sSUFBSSxVQUFVLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFO1lBQ2xELEtBQUssRUFBRSxJQUFJLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUM7U0FDeEQsQ0FBQyxDQUFDO0lBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuZXhwb3J0IGNsYXNzIEp3dEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRzdGF0aWMgdHlwZSA9ICdKV1RfRVJST1InO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcihcblx0XHRwdWJsaWMgcmVhZG9ubHkgb3JpZ2luYWxSZXF1ZXN0OiBIdHRwUmVxdWVzdDx1bmtub3duPiB8IHVuZGVmaW5lZCxcblx0XHRwdWJsaWMgcmVhZG9ubHkgb3JpZ2luYWxFcnJvcjogdW5rbm93bixcblx0XHRtZXNzYWdlID0gSnd0RXJyb3IudHlwZSxcblx0KSB7XG5cdFx0c3VwZXIobWVzc2FnZSk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRXJyb3JSZXNwb25zZShcblx0XHRyZXF1ZXN0OiBIdHRwUmVxdWVzdDx1bmtub3duPiB8IHVuZGVmaW5lZCxcblx0XHRyZWZyZXNoRXJyb3I6IHVua25vd24sXG5cdCk6IEh0dHBFcnJvclJlc3BvbnNlIHtcblx0XHRyZXR1cm4gbmV3IEh0dHBFcnJvclJlc3BvbnNlKHtcblx0XHRcdGVycm9yOiBKd3RFcnJvci5jcmVhdGVFcnJvckV2ZW50KHJlcXVlc3QsIHJlZnJlc2hFcnJvciksXG5cdFx0fSk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRXJyb3JFdmVudChcblx0XHRyZXF1ZXN0OiBIdHRwUmVxdWVzdDx1bmtub3duPiB8IHVuZGVmaW5lZCxcblx0XHRyZWZyZXNoRXJyb3I6IHVua25vd24sXG5cdCk6IEVycm9yRXZlbnQge1xuXHRcdHJldHVybiBuZXcgRXJyb3JFdmVudChKd3RFcnJvci50eXBlLCB7XG5cdFx0XHRlcnJvcjogbmV3IEp3dEVycm9yKHJlcXVlc3QsIHJlZnJlc2hFcnJvciksXG5cdFx0fSk7XG5cdH1cbn1cblxuLyoqXG4gKiBXaGVuIGJvdGggYWNjZXNzIGFuZCByZWZyZXNoIHRva2VucyBhcmUgZWl0aGVyIGludmFsaWQgb3IgZXhwaXJlZCFcbiAqL1xuZXhwb3J0IGNsYXNzIEp3dENhbm5vdFJlZnJlc2hFcnJvciBleHRlbmRzIEp3dEVycm9yIHtcblx0c3RhdGljIHR5cGUgPSAnSldUX0NBTk5PVF9SRUZSRVNIX0VSUk9SJztcblxuXHRwdWJsaWMgY29uc3RydWN0b3IoXG5cdFx0cHVibGljIHJlYWRvbmx5IG9yaWdpbmFsUmVxdWVzdDogSHR0cFJlcXVlc3Q8dW5rbm93bj4gfCB1bmRlZmluZWQsXG5cdFx0cHVibGljIHJlYWRvbmx5IG9yaWdpbmFsRXJyb3I6IHVua25vd24sXG5cdCkge1xuXHRcdHN1cGVyKG9yaWdpbmFsUmVxdWVzdCwgb3JpZ2luYWxFcnJvciwgSnd0Q2Fubm90UmVmcmVzaEVycm9yLnR5cGUpO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZUVycm9yUmVzcG9uc2UoXG5cdFx0cmVxdWVzdDogSHR0cFJlcXVlc3Q8dW5rbm93bj4gfCB1bmRlZmluZWQsXG5cdFx0cmVmcmVzaEVycm9yOiB1bmtub3duLFxuXHQpOiBIdHRwRXJyb3JSZXNwb25zZSB7XG5cdFx0cmV0dXJuIG5ldyBIdHRwRXJyb3JSZXNwb25zZSh7XG5cdFx0XHRlcnJvcjogSnd0Q2Fubm90UmVmcmVzaEVycm9yLmNyZWF0ZUVycm9yRXZlbnQocmVxdWVzdCwgcmVmcmVzaEVycm9yKSxcblx0XHR9KTtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGVFcnJvckV2ZW50KFxuXHRcdHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PHVua25vd24+IHwgdW5kZWZpbmVkLFxuXHRcdHJlZnJlc2hFcnJvcjogdW5rbm93bixcblx0KTogRXJyb3JFdmVudCB7XG5cdFx0cmV0dXJuIG5ldyBFcnJvckV2ZW50KEp3dENhbm5vdFJlZnJlc2hFcnJvci50eXBlLCB7XG5cdFx0XHRlcnJvcjogbmV3IEp3dENhbm5vdFJlZnJlc2hFcnJvcihyZXF1ZXN0LCByZWZyZXNoRXJyb3IpLFxuXHRcdH0pO1xuXHR9XG59XG5cbi8qKlxuICogV2hlbiByZWZyZXNoIGZhaWxlZFxuICovXG5leHBvcnQgY2xhc3MgSnd0Q291bGRudFJlZnJlc2hFcnJvciBleHRlbmRzIEp3dEVycm9yIHtcblx0c3RhdGljIHR5cGUgPSAnSldUX0NPVUxETlRfUkVGUkVTSF9FUlJPUic7XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKFxuXHRcdHB1YmxpYyByZWFkb25seSBvcmlnaW5hbFJlcXVlc3Q6IEh0dHBSZXF1ZXN0PHVua25vd24+IHwgdW5kZWZpbmVkLFxuXHRcdHB1YmxpYyByZWFkb25seSBvcmlnaW5hbEVycm9yOiB1bmtub3duLFxuXHQpIHtcblx0XHRzdXBlcihvcmlnaW5hbFJlcXVlc3QsIG9yaWdpbmFsRXJyb3IsIEp3dENvdWxkbnRSZWZyZXNoRXJyb3IudHlwZSk7XG5cdH1cblxuXHRzdGF0aWMgY3JlYXRlRXJyb3JSZXNwb25zZShcblx0XHRyZXF1ZXN0OiBIdHRwUmVxdWVzdDx1bmtub3duPiB8IHVuZGVmaW5lZCxcblx0XHRyZWZyZXNoRXJyb3I6IHVua25vd24sXG5cdCk6IEh0dHBFcnJvclJlc3BvbnNlIHtcblx0XHRyZXR1cm4gbmV3IEh0dHBFcnJvclJlc3BvbnNlKHtcblx0XHRcdGVycm9yOiBKd3RDb3VsZG50UmVmcmVzaEVycm9yLmNyZWF0ZUVycm9yRXZlbnQocmVxdWVzdCwgcmVmcmVzaEVycm9yKSxcblx0XHR9KTtcblx0fVxuXG5cdHN0YXRpYyBjcmVhdGVFcnJvckV2ZW50KFxuXHRcdHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PHVua25vd24+IHwgdW5kZWZpbmVkLFxuXHRcdHJlZnJlc2hFcnJvcjogdW5rbm93bixcblx0KTogRXJyb3JFdmVudCB7XG5cdFx0cmV0dXJuIG5ldyBFcnJvckV2ZW50KEp3dENvdWxkbnRSZWZyZXNoRXJyb3IudHlwZSwge1xuXHRcdFx0ZXJyb3I6IG5ldyBKd3RDb3VsZG50UmVmcmVzaEVycm9yKHJlcXVlc3QsIHJlZnJlc2hFcnJvciksXG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==