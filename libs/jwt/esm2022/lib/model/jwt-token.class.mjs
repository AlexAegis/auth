import { Base64 } from 'js-base64';
import { decodeJsonLikeBase64 } from '../function/base64-decoder.function';
import { isUnixTimestampExpired } from '../function/is-unix-timestamp-expired.function';
export class JwtToken {
    static { this.JWT_TOKEN_SEPARATOR = '.'; }
    constructor(header, payload, signature) {
        this.header = header;
        this.payload = payload;
        this.signature = signature;
    }
    static from(token) {
        const convertedSegments = JwtToken.splitTokenString(token);
        if (!convertedSegments) {
            return null;
        }
        const header = decodeJsonLikeBase64(convertedSegments[0]);
        const payload = decodeJsonLikeBase64(convertedSegments[1]);
        const signature = Base64.decode(convertedSegments[2]); // Not used, only for validation
        if (!header || !payload || !signature) {
            return null;
        }
        return new JwtToken(header, payload, signature);
    }
    static stripScheme(jwtHeaderValue, scheme) {
        return jwtHeaderValue.substring((scheme ?? '').length);
    }
    static splitTokenString(token, separator = JwtToken.JWT_TOKEN_SEPARATOR) {
        const spl = token.split(separator);
        if (spl.length !== 3) {
            return null;
        }
        return spl;
    }
    isExpired() {
        return isUnixTimestampExpired(this.payload.exp);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LXRva2VuLmNsYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9qd3Qvc3JjL2xpYi9tb2RlbC9qd3QtdG9rZW4uY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQWdCLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDekYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFrRXhGLE1BQU0sT0FBTyxRQUFRO2FBQ0csd0JBQW1CLEdBQUcsR0FBRyxDQUFDO0lBRWpELFlBQ1EsTUFBc0IsRUFDdEIsT0FBaUMsRUFDakMsU0FBaUI7UUFGakIsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7UUFDdEIsWUFBTyxHQUFQLE9BQU8sQ0FBMEI7UUFDakMsY0FBUyxHQUFULFNBQVMsQ0FBUTtJQUN0QixDQUFDO0lBRUcsTUFBTSxDQUFDLElBQUksQ0FDakIsS0FBcUI7UUFFckIsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDeEIsT0FBTyxJQUFJLENBQUM7UUFDYixDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQUcsb0JBQW9CLENBQWlCLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUUsTUFBTSxPQUFPLEdBQUcsb0JBQW9CLENBQStCLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekYsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0NBQWdDO1FBQ3ZGLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN2QyxPQUFPLElBQUksQ0FBQztRQUNiLENBQUM7UUFFRCxPQUFPLElBQUksUUFBUSxDQUFhLE1BQU0sRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVNLE1BQU0sQ0FBQyxXQUFXLENBQUMsY0FBc0IsRUFBRSxNQUFlO1FBQ2hFLE9BQU8sY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRU0sTUFBTSxDQUFDLGdCQUFnQixDQUM3QixLQUFxQixFQUNyQixZQUFvQixRQUFRLENBQUMsbUJBQW1CO1FBRWhELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbkMsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3RCLE9BQU8sSUFBSSxDQUFDO1FBQ2IsQ0FBQztRQUNELE9BQU8sR0FBaUQsQ0FBQztJQUMxRCxDQUFDO0lBRU0sU0FBUztRQUNmLE9BQU8sc0JBQXNCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZTY0IH0gZnJvbSAnanMtYmFzZTY0JztcbmltcG9ydCB7IEJhc2U2NFN0cmluZywgZGVjb2RlSnNvbkxpa2VCYXNlNjQgfSBmcm9tICcuLi9mdW5jdGlvbi9iYXNlNjQtZGVjb2Rlci5mdW5jdGlvbic7XG5pbXBvcnQgeyBpc1VuaXhUaW1lc3RhbXBFeHBpcmVkIH0gZnJvbSAnLi4vZnVuY3Rpb24vaXMtdW5peC10aW1lc3RhbXAtZXhwaXJlZC5mdW5jdGlvbic7XG5cbmV4cG9ydCB0eXBlIEp3dFRva2VuU3RyaW5nID0gc3RyaW5nO1xuZXhwb3J0IHR5cGUgVW5peFRpbWUgPSBudW1iZXI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSnd0VG9rZW5IZWFkZXIge1xuXHQvKipcblx0ICogTWVkaWEgdHlwZVxuXHQgKi9cblx0dHlwPzogc3RyaW5nO1xuXHQvKipcblx0ICogQ29udGVudCBUeXBlXG5cdCAqL1xuXHRjdHk/OiAnSldUJyB8IHN0cmluZztcblx0LyoqXG5cdCAqIEFsZ29yaXRobVxuXHQgKi9cblx0YWxnOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBFbmNyeXB0aW9uXG5cdCAqL1xuXHRlbmM/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmVnaXN0ZXJlZCBjbGFpbSBuYW1lcyBkZWZpbmVkIGluIFJGQyA3NTE5IGFyZSBwcmVkZWZpbmVkIGhlcmUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSnd0VG9rZW5QYXlsb2FkIHtcblx0LyoqXG5cdCAqIElzc3VlclxuXHQgKi9cblx0aXNzPzogc3RyaW5nO1xuXHQvKipcblx0ICogU3ViamVjdFxuXHQgKi9cblx0c3ViPzogc3RyaW5nO1xuXHQvKipcblx0ICogQXVkaWVuY2Vcblx0ICovXG5cdGF1ZD86IHN0cmluZztcblx0LyoqXG5cdCAqIEV4cGlyYXRpb24gVGltZVxuXHQgKi9cblx0ZXhwOiBVbml4VGltZTtcblx0LyoqXG5cdCAqIE5vdCBCZWZvcmVcblx0ICovXG5cdG5iZj86IFVuaXhUaW1lO1xuXHQvKipcblx0ICogSXNzdWVkIGF0XG5cdCAqL1xuXHRpYXQ/OiBVbml4VGltZTtcblx0LyoqXG5cdCAqIEpXVCBJRFxuXHQgKi9cblx0anRpPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIENvbW1vbiB0b2tlbiBwYWlyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSnd0VG9rZW5QYWlyIHtcblx0YWNjZXNzVG9rZW46IEp3dFRva2VuU3RyaW5nO1xuXHRyZWZyZXNoVG9rZW46IEp3dFRva2VuU3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgSnd0VG9rZW48Q2xhaW1zID0gUmVjb3JkPHN0cmluZyB8IG51bWJlciwgdW5rbm93bj4+IHtcblx0cHVibGljIHN0YXRpYyByZWFkb25seSBKV1RfVE9LRU5fU0VQQVJBVE9SID0gJy4nO1xuXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcihcblx0XHRwdWJsaWMgaGVhZGVyOiBKd3RUb2tlbkhlYWRlcixcblx0XHRwdWJsaWMgcGF5bG9hZDogSnd0VG9rZW5QYXlsb2FkICYgQ2xhaW1zLFxuXHRcdHB1YmxpYyBzaWduYXR1cmU6IHN0cmluZyxcblx0KSB7fVxuXG5cdHB1YmxpYyBzdGF0aWMgZnJvbTxGcm9tQ2xhaW1zID0gUmVjb3JkPHN0cmluZyB8IG51bWJlciwgdW5rbm93bj4+KFxuXHRcdHRva2VuOiBKd3RUb2tlblN0cmluZyxcblx0KTogSnd0VG9rZW48RnJvbUNsYWltcz4gfCBudWxsIHtcblx0XHRjb25zdCBjb252ZXJ0ZWRTZWdtZW50cyA9IEp3dFRva2VuLnNwbGl0VG9rZW5TdHJpbmcodG9rZW4pO1xuXHRcdGlmICghY29udmVydGVkU2VnbWVudHMpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdGNvbnN0IGhlYWRlciA9IGRlY29kZUpzb25MaWtlQmFzZTY0PEp3dFRva2VuSGVhZGVyPihjb252ZXJ0ZWRTZWdtZW50c1swXSk7XG5cdFx0Y29uc3QgcGF5bG9hZCA9IGRlY29kZUpzb25MaWtlQmFzZTY0PEp3dFRva2VuUGF5bG9hZCAmIEZyb21DbGFpbXM+KGNvbnZlcnRlZFNlZ21lbnRzWzFdKTtcblx0XHRjb25zdCBzaWduYXR1cmUgPSBCYXNlNjQuZGVjb2RlKGNvbnZlcnRlZFNlZ21lbnRzWzJdKTsgLy8gTm90IHVzZWQsIG9ubHkgZm9yIHZhbGlkYXRpb25cblx0XHRpZiAoIWhlYWRlciB8fCAhcGF5bG9hZCB8fCAhc2lnbmF0dXJlKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3IEp3dFRva2VuPEZyb21DbGFpbXM+KGhlYWRlciwgcGF5bG9hZCwgc2lnbmF0dXJlKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgc3RyaXBTY2hlbWUoand0SGVhZGVyVmFsdWU6IHN0cmluZywgc2NoZW1lPzogc3RyaW5nKTogSnd0VG9rZW5TdHJpbmcge1xuXHRcdHJldHVybiBqd3RIZWFkZXJWYWx1ZS5zdWJzdHJpbmcoKHNjaGVtZSA/PyAnJykubGVuZ3RoKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgc3BsaXRUb2tlblN0cmluZyhcblx0XHR0b2tlbjogSnd0VG9rZW5TdHJpbmcsXG5cdFx0c2VwYXJhdG9yOiBzdHJpbmcgPSBKd3RUb2tlbi5KV1RfVE9LRU5fU0VQQVJBVE9SLFxuXHQpOiBbQmFzZTY0U3RyaW5nLCBCYXNlNjRTdHJpbmcsIEJhc2U2NFN0cmluZ10gfCBudWxsIHtcblx0XHRjb25zdCBzcGwgPSB0b2tlbi5zcGxpdChzZXBhcmF0b3IpO1xuXHRcdGlmIChzcGwubGVuZ3RoICE9PSAzKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIHNwbCBhcyBbQmFzZTY0U3RyaW5nLCBCYXNlNjRTdHJpbmcsIEJhc2U2NFN0cmluZ107XG5cdH1cblxuXHRwdWJsaWMgaXNFeHBpcmVkKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBpc1VuaXhUaW1lc3RhbXBFeHBpcmVkKHRoaXMucGF5bG9hZC5leHApO1xuXHR9XG59XG4iXX0=