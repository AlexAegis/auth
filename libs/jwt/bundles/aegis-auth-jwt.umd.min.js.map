{"version":3,"sources":["../../../../libs/jwt/src/lib/function/is-unix-timestamp-expired.function.ts","../../../../libs/jwt/src/lib/model/header-configuration.interface.ts","../../../../libs/jwt/src/lib/model/auth-core-configuration.interface.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../libs/jwt/src/lib/errors/jwt-error.class.ts","../../../../libs/jwt/src/lib/function/is-not-nullish.predicate.ts","../../../../libs/jwt/src/lib/function/string.predicate.ts","../../../../libs/jwt/src/lib/function/handle-jwt-failure.function.ts","../../../../libs/jwt/src/lib/function/handle-jwt-error.function.ts","../../../../libs/jwt/src/lib/function/function.predicate.ts","../../../../libs/jwt/src/lib/function/promise.predicate.ts","../../../../libs/jwt/src/lib/function/into-observable.function.ts","../../../../libs/jwt/src/lib/function/is-timestamp-expired-now-and-when-it-is.function.ts","../../../../libs/jwt/src/lib/function/is-unix-timestamp-expired-now-and-when-it-is.function.ts","../../../../libs/jwt/src/lib/function/http-response.predicate.ts","../../../../libs/jwt/src/lib/function/do-jwt-refresh.function.ts","../../../../libs/jwt/src/lib/function/call-when-function.function.ts","../../../../libs/jwt/src/lib/function/try-jwt-refresh.function.ts","../../../../libs/jwt/src/lib/function/check-against-http-error-filter.function.ts","../../../../libs/jwt/src/lib/function/base64-decoder.function.ts","../../../../libs/jwt/src/lib/model/jwt-token.class.ts","../../../../libs/jwt/src/lib/token/jwt-configuration.token.ts","../../../../libs/jwt/src/lib/service/jwt-token.service.ts","../../../../libs/jwt/src/lib/guards/login.guard.ts","../../../../libs/jwt/src/lib/interceptor/jwt-error-handling.interceptor.ts","../../../../libs/jwt/src/lib/function/match-against.function.ts","../../../../libs/jwt/src/lib/function/check-against-url-filter.function.ts","../../../../libs/jwt/src/lib/function/separate-url.function.ts","../../../../libs/jwt/src/lib/interceptor/jwt-injector.interceptor.ts","../../../../libs/jwt/src/lib/interceptor/jwt-refresh.interceptor.ts","../../../../libs/jwt/src/lib/jwt.module.ts","../../../../libs/jwt/src/lib/model/http-method.enum.ts"],"names":["isUnixTimestampExpired","unixTimestamp","Infinity","Math","floor","Date","getTime","DEFAULT_HEADER_CONFIG","getValue","BehaviorSubject","DEFAULT_JWT_HEADER","DEFAULT_JWT_SCHEME","DEFAULT_JWT_CONFIG","Object","assign","header","scheme","handleWithCredentials","DEFAULT_JWT_REFRESH_CONFIG_DEFAULT_AUTO_IN_GUARD","DEFAULT_JWT_REFRESH_CONFIG","method","errorCodeWhitelist","isAutoRefreshAllowedInLoginGuardByDefault","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","this","constructor","create","__read","o","n","m","Symbol","iterator","r","e","i","ar","next","done","push","value","error","__spread","arguments","length","concat","JwtError","_super","originalRequest","originalError","message","type","_this","createErrorResponse","request","refreshError","HttpErrorResponse","createErrorEvent","ErrorEvent","Error","JwtCannotRefreshError","JwtCouldntRefreshError","isNotNullish","t","isString","stringLike","handleJwtFailure","errorCallbackOrRedirect","router","redirectParameters","queryParams","navigate","handleJwtError","wrappedError","jwtConfiguration","jwtRefreshConfiguration","_a","onFailure","onFailureRedirectParameters","throwError","isFunction","funlike","isPromise","promiseLike","then","catch","intoObservable","isObservable","of","pipe","switchMap","result","from","isUnixTimestampExpiredNowAndWhenItIs","timestamp","merge","timer","mapTo","isHttpResponse","httpEvent","HttpEventType","Response","doJwtRefresh","requestBody","onError","originalAction","functionLike","refreshRequest","HttpRequest","refreshUrl","refreshRequestInitials","handle","filter","map","response","transformRefreshResponse","body","tap","refreshResponse","setRefreshedTokens","mergeMap","catchError","tryJwtRefresh","httpErrorFilter","statusMatcher","errorCodeWhitelistRulesPass","errorCodeBlacklistRulesPass","code","status","_b","some","_c","errorCodeBlacklist","createRefreshRequestBody","take","decodeJsonLikeBase64","str","JSON","parse","Base64","decode","console","JwtToken","payload","signature","token","convertedSegments","splitTokenString","stripScheme","jwtHeaderValue","substring","separator","JWT_TOKEN_SEPARATOR","spl","split","isExpired","exp","JWT_CONFIGURATION_TOKEN","InjectionToken","DEFAULT_JWT_CONFIGURATION_TOKEN","JWT_REFRESH_CONFIGURATION_TOKEN","DEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN","JwtTokenService","httpHandler","rawConfig","rawDefaultConfig","rawDefaultRefreshConfig","rawRefreshConfig","config","refreshConfig","undefined","rawAccessToken$","getToken","rawRefreshToken$","getRefreshToken","accessToken$","jwtToken","refreshToken$","refreshToken","accessTokenHeader$","accessTokenPayload$","refreshTokenHeader$","refreshTokenPayload$","isAccessTokenExpired$","isRefreshTokenExpired$","isAccessTokenValid$","isRefreshTokenValid$","manualRefresh","Injectable","args","providedIn","HttpHandler","Inject","Optional","Router","decorators","LoginGuard","jwtTokenService","isAccessTokenValidOnce$","isValid","isRefreshAllowed","allowed","canActivate","route","_state","data","canActivateChild","childRoute","canLoad","_segments","JwtErrorHandlingInterceptor","jwtConfig","defaultJwtConfig","defaultJwtRefreshConfig","intercept","errorResponse","matchRule","rule","against","test","matchAgainst","inverse","checkAgainstUrlFilter","urlFilter","_k","domain","path","protocol","protocolMatcher","domainMatcher","pathMatcher","protocolWhitelistRulesPass","protocolWhitelist","protocolBlacklistRulesPass","protocolBlacklist","domainWhitelistRulesPass","_e","_d","domainWhitelist","domainBlacklistRulesPass","_f","domainBlacklist","pathWhitelistRulesPass","_h","_g","pathWhitelist","pathBlacklistRulesPass","_j","pathBlacklist","separateUrl","url","urlMatch","match","JwtInjectorInterceptor","separatedUrl","rawToken","isAccessTokenExpiredOrInvalid","cloned","clone","headers","set","withCredentials","JwtRefreshInterceptor","isRawRefreshTokenGetterAvailable","get","rawRefreshToken","isRefreshTokenExpiredOrInvalid","requestWithUpdatedTokens","accessToken","createJwtConfigurationProvider","tokenConfigurationProvider","provide","multi","createJwtRefreshConfigurationProvider","tokenRefreshConfigurationProvider","HttpMethod","JwtModule","forRoot","jwtModuleConfigurationProvider","jwtRefreshConfigurationProvider","ngModule","providers","HTTP_INTERCEPTORS","useClass","useValue","NgModule","imports","CommonModule"],"mappings":"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","sourcesContent":["/**\n *\n * @param unixTimestamp seconds from the unix epoch 1970-01-01T00:00:00Z\n * if not supplied it will always be expired\n */\nexport function isUnixTimestampExpired(unixTimestamp = -Infinity): boolean {\n\treturn unixTimestamp < Math.floor(new Date().getTime() / 1000);\n}\n","import { BehaviorSubject, Observable } from 'rxjs';\n\nexport const DEFAULT_HEADER_CONFIG: Partial<HeaderConfiguration> = {\n\tgetValue: new BehaviorSubject<string | null | undefined>(null),\n};\n\nexport interface NormalizedHeaderConfiguration extends HeaderConfiguration {\n\tvalue$: Observable<string | null | undefined>;\n}\n\n/**\n * Token injection configuration\n *\n * The optional generic defined the refresh endpoints Response type. If you\n * are not using that feature there's no need to define it.\n *\n * Example configuration:\n * ```typescript\n * AuthCoreModule.forRoot<TokenStorageService>({\n *\t\tuseFactory: (service: TokenStorageService) => ({\n *\t\t\tgetToken: service.accessToken$\n *\t\t\tautoRefresher: {\n * \t\t\t\tendpoint: `${environment.api}/auth/refresh`,\n * \t\t\t\tsetToken: (response) => service.accessToken$.next(response.accessToken)\n * \t\t\t}\n *\t\t}),\n *\t\tdeps: [TokenStorageService],\n * })\n * ```\n */\nexport interface HeaderConfiguration extends UrlFilter {\n\t/**\n\t * A callback or observable that will be called or subscribed to\n\t * on every http request and returns a value for the header\n\t *\n\t * @example getValue: () => localstorage.get('foo')\n\t * @example getValue: myTokenService.foo$\n\t */\n\tgetValue:\n\t\t| Observable<string | null | undefined>\n\t\t| (() =>\n\t\t\t\t| string\n\t\t\t\t| null\n\t\t\t\t| undefined\n\t\t\t\t| Promise<string | null | undefined>\n\t\t\t\t| Observable<string | null | undefined>);\n\n\t/**\n\t * Header name to be set\n\t */\n\theader: string;\n}\n\nexport interface UrlFilter {\n\t/**\n\t * These domains won't recieve this header even if they are listed in the\n\t * whitelist.\n\t *\n\t * If `null` or `undefined`, this category of rules won't take any effect.\n\t * If empty, it would mean \"No domains are blacklisted\", and it won't\n\t * take any effect.\n\t *\n\t * @default undefined\n\t * @example ['localhost:3333']\n\t * @example [/localhost:[0-9]{4}/]\n\t */\n\tdomainBlacklist?: (string | RegExp)[];\n\n\t/**\n\t * Only domains listed will be recieving header injections\n\t *\n\t * If `null` or `undefined`, this category of rules won't take any effect.\n\t * If empty, it would mean \"No domains are whitelisted\", so no paths would\n\t * recieve tokens!\n\t *\n\t * @default undefined\n\t * @example ['localhost:3333']\n\t * @example [/localhost:[0-9]{4}/]\n\t */\n\tdomainWhitelist?: (string | RegExp)[];\n\n\t/**\n\t * These paths won't recieve this header even if they are listed in the\n\t * whitelist.\n\t *\n\t * If `null` or `undefined`, this category of rules won't take any effect.\n\t * If empty, it would mean \"No paths are blacklisted\", and it won't\n\t * take any effect.\n\t *\n\t * @default undefined\n\t * @example ['api/v2/users/1']\n\t * @example [/users\\/.+/]\n\t */\n\tpathBlacklist?: (string | RegExp)[];\n\n\t/**\n\t * Only paths listed will be recieving this header injection.\n\t *\n\t * If `null` or `undefined`, this category of rules won't take any effect.\n\t * If empty, it would mean \"No paths are whitelisted\", so no paths would\n\t * recieve tokens!\n\t *\n\t * @default undefined\n\t * @example ['api/v2/users/1']\n\t * @example [/users\\/.+/]\n\t */\n\tpathWhitelist?: (string | RegExp)[];\n\n\t/**\n\t * These protocols won't recieve this header even if they are listed in\n\t * the whitelist.\n\t *\n\t * If `null` or `undefined`, this category of rules won't take any effect.\n\t * If empty, it would mean \"No protocols are blacklisted\", and it won't\n\t * take any effect.\n\t *\n\t * @default undefined\n\t * @example ['http']\n\t * @example [/https?/]\n\t */\n\tprotocolBlacklist?: (string | RegExp)[];\n\n\t/**\n\t * Only protocols listed will be recieving this header injections.\n\t *\n\t * If empty or undefined, this category of rules won't take any effect.\n\t * If empty, it would mean \"No protocols are whitelisted\", so no protocols\n\t * would recieve tokens!\n\t *\n\t * @default undefined\n\t * @example ['http']\n\t * @example [/https?/]\n\t */\n\tprotocolWhitelist?: (string | RegExp)[];\n}\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Params } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { JwtCannotRefreshError, JwtCouldntRefreshError, JwtError } from '../errors/jwt-error.class';\nimport {\n\tDEFAULT_HEADER_CONFIG,\n\tHeaderConfiguration,\n\tUrlFilter,\n} from '../model/header-configuration.interface';\nimport { HttpMethodType } from './http-method.enum';\n\nexport const DEFAULT_JWT_HEADER = 'Authorization';\nexport const DEFAULT_JWT_SCHEME = 'Bearer ';\n\nexport const DEFAULT_JWT_CONFIG: Partial<JwtConfiguration> = {\n\t...DEFAULT_HEADER_CONFIG,\n\theader: DEFAULT_JWT_HEADER,\n\tscheme: DEFAULT_JWT_SCHEME,\n\thandleWithCredentials: true,\n};\n\nexport const DEFAULT_JWT_REFRESH_CONFIG_DEFAULT_AUTO_IN_GUARD = true;\n\nexport const DEFAULT_JWT_REFRESH_CONFIG: Partial<JwtRefreshConfiguration<unknown, unknown>> = {\n\tmethod: 'POST',\n\terrorCodeWhitelist: [401],\n\tisAutoRefreshAllowedInLoginGuardByDefault: DEFAULT_JWT_REFRESH_CONFIG_DEFAULT_AUTO_IN_GUARD,\n};\n\nexport interface JwtRefreshResponse {\n\taccessToken: string;\n\trefreshToken?: string;\n}\n\nexport interface HttpRequestInit {\n\theaders?: HttpHeaders;\n\treportProgress?: boolean;\n\tparams?: HttpParams;\n\tresponseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n\twithCredentials?: boolean;\n}\n\n/**\n * TODO: optional generic matcher function\n */\nexport interface HttpErrorFilter {\n\t/**\n\t * The error codes on which an act is allowed to happen,\n\t * an empty array means it can't act on anything\n\t *\n\t * @default [401]\n\t */\n\terrorCodeWhitelist?: number[];\n\n\t/**\n\t * The error codes on which an act is not allowed to happen,\n\t * an empty array (and if undefined) means it can always try a single\n\t * act in case of an error\n\t *\n\t * @default undefined\n\t */\n\terrorCodeBlacklist?: number[];\n}\n\n/**\n * Enables the RefreshInterceptor which will automatically tries to\n * refresh the accessToken on expiration or failure of the next request.\n *\n * Because handling refreshes is not standardized, instead of asking for the\n * refresh token directly I ask you to provide the request itself, however you\n * like to. In these callbacks you can access your refreshToken wherever you\n * store it.\n *\n * You can still configure a `getRefreshToken` property but it's optional,\n * not used in the interceptor at all, and is only used in the helper service.\n * If you do not with to interact with the parsed refreshToken (Usually you\n * don't need to) you can leave that out. But it's there if you might need it.\n *\n * The reason it's configured through multiple properties instead of a callback\n * where I let you do the refresh request however you see fit is to make sure the\n * refreshUrl is known to avoid potentional infinite requests when hitting the\n * refresh endpoint. This way you don't have to remember setting this into the\n * url filter manually.\n *\n * @example configuration.\n * AuthCoreModule.forRoot<TokenStorageService>({\n *\t\tuseFactory: (service: TokenStorageService) => ({\n *\t\t\tgetToken: service.accessToken$\n *\t\t\tautoRefresher: {\n * \t\t\t\tendpoint: `${environment.api}/auth/refresh`,\n * \t\t\t\tsetToken: (response) => service.accessToken$.next(response.accessToken)\n * \t\t\t}\n *\t\t}),\n *\t\tdeps: [TokenStorageService],\n * })\n *\n * @default undefined\n */\nexport interface JwtRefreshConfiguration<RefreshRequest, RefreshResponse>\n\textends UrlFilter,\n\t\tHttpErrorFilter {\n\t/**\n\t * After a successful refresh, this callback will be called.\n\t * You need to define a function which will save the the token in a way\n\t * that if the interceptor calls `getToken` again, it will get the token\n\t * saved with this method.\n\t *\n\t * @example using `localStorage`\n\t * \t\tsetToken: (response) => localStorage.setItem('accessToken', response.accessToken)\n\t * @example using a service.\n\t *\n\t * ```typescript\n\t * AuthCoreModule.forRoot<TokenStorageService>({\n\t *\t\tuseFactory: (service: TokenStorageService) => ({\n\t *\t\t\tgetToken: service.accessToken$\n\t *\t\t\tautoRefresher: {\n\t * \t\t\t\tendpoint: `${environment.api}/auth/refresh`,\n\t * \t\t\t\tsetRefreshToken: (response) => service.accessToken$.next(response.accessToken)\n\t * \t\t\t}\n\t *\t\t}),\n\t *\t\tdeps: [TokenStorageService],\n\t * })\n\t * ```\n\t *\n\t */\n\tsetRefreshedTokens: (response: JwtRefreshResponse) => void;\n\n\t/**\n\t * The method for the request, usually it's a POST so that's the default\n\t *\n\t * @default 'POST'\n\t */\n\tmethod?: HttpMethodType;\n\n\t/**\n\t * The endpoint that will be requested for a new token\n\t */\n\trefreshUrl: string;\n\n\t/**\n\t * A callback or observable that can be used to retrieve the body of the\n\t * request. If it's null or undefined, the refresh won't be executed. This\n\t * can be utilized to not do a refresh on a logged out state.\n\t *\n\t * @example getValue: () => localstorage.get('foo')\n\t * @example getValue: myTokenService.foo$\n\t */\n\tcreateRefreshRequestBody:\n\t\t| Observable<RefreshRequest | null | undefined>\n\t\t| (() =>\n\t\t\t\t| RefreshRequest\n\t\t\t\t| null\n\t\t\t\t| undefined\n\t\t\t\t| Promise<RefreshRequest | null | undefined>\n\t\t\t\t| Observable<RefreshRequest | null | undefined>);\n\n\t/**\n\t * A callback that should return the defaults on the request\n\t */\n\trefreshRequestInitials?: (() => HttpRequestInit | undefined) | HttpRequestInit;\n\n\t/**\n\t * This function have to transform the result of your refresh endpoint\n\t * into a digestable form. It will be called after successful refreshes.\n\t */\n\ttransformRefreshResponse: (response: RefreshResponse) => JwtRefreshResponse;\n\n\t/**\n\t * This callback is called when a refresh either failed or cannot be done.\n\t * This marks the point where both tokens are invalid and the user needs to\n\t * relog. Because this is usually done through a login page, aside from a\n\t * regular callback, a string can also be supplied which will act as the\n\t * target of navigation. Check `onFailureRedirectParameters` if you wish\n\t * to supply query parameters. For more advanced usage, consider\n\t * implementing it as a custom function, the error object is available\n\t * there too!\n\t */\n\tonFailure?: string | ((error: JwtCouldntRefreshError | JwtCannotRefreshError) => void);\n\n\tonFailureRedirectParameters?:\n\t\t| ((error: JwtCouldntRefreshError | JwtCannotRefreshError) => HttpParams | Params)\n\t\t| HttpParams\n\t\t| Params;\n\n\t/**\n\t * Optional!\n\t *\n\t * The refresh mechanic only uses this to determine if it's expired or not\n\t * and so potentionally saving a request that would fail anyway. It is\n\t * also used in the helper service if you with to interact with the\n\t * parsed refreshToken throught the helper observables. If you do not\n\t * need either of these, you don't have to implement this.\n\t *\n\t * A callback or observable that can be used to retrieve the refresh token\n\t * Not used in the interceptor!\n\t *\n\t * @example getValue: () => localstorage.get('foo')\n\t * @example getValue: myTokenService.foo$\n\t */\n\tgetRefreshToken?:\n\t\t| Observable<string | null | undefined>\n\t\t| (() =>\n\t\t\t\t| string\n\t\t\t\t| null\n\t\t\t\t| undefined\n\t\t\t\t| Promise<string | null | undefined>\n\t\t\t\t| Observable<string | null | undefined>);\n\n\t/**\n\t * When using the LoginGuard this setting will determine the default\n\t * value. So instead of disabling the autoRefresh behavior on every\n\t * route with the data option, or writing your own guard (Which would\n\t * be really simple) just set this to false. You can still override it\n\t * using route data.\n\t *\n\t * See the LoginGuardData helper interface to see what it can utilize.\n\t *\n\t * @default true\n\t */\n\tisAutoRefreshAllowedInLoginGuardByDefault?: boolean;\n}\n\n/**\n * This is a helper interface because they look the same on both\n * `JwtConfiguration` and `JwtRefreshConfiguration`. They are re-defined\n * on them to provide better documentation.\n *\n * In the case where you wish to implement them both in a separate object\n * then spread it back to both to reduce code-duplication, this type can\n * be utilized.\n */\nexport interface JwtErrorHandling {\n\t/**\n\t * If it's a string, instead of calling it, a redirection will happen,\n\t * with `onFailureRedirectParameters` as it's queryParams.\n\t */\n\tonFailure?:\n\t\t| string\n\t\t| ((jwtError: JwtError | JwtCouldntRefreshError | JwtCannotRefreshError) => void);\n\n\t/**\n\t * This option is only used when the `onFailure` option is a string\n\t * so it's handled as a redirect. When this happens, you can define\n\t * the queryparams to be used with this redirect.\n\t *\n\t * When implemented as a function, the JwtError will be forwarded to it.\n\t * All JwtErrors have the `originalRequest` available in them, so it's\n\t * trivial to acquire the failed url.\n\t */\n\tonFailureRedirectParameters?:\n\t\t| ((\n\t\t\t\terror: JwtError | JwtCouldntRefreshError | JwtCannotRefreshError\n\t\t  ) => HttpParams | Params)\n\t\t| HttpParams\n\t\t| Params;\n}\n\n/**\n * Token injection configuration\n *\n * The optional generic defined the refresh endpoints Response type. If you\n * are not using that feature there's no need to define it.\n *\n * Example configuration:\n * ```typescript\n * AuthCoreModule.forRoot<TokenStorageService>({\n *\t\tuseFactory: (service: TokenStorageService) => ({\n *\t\t\tgetToken: service.accessToken$\n *\t\t\tautoRefresher: {\n * \t\t\t\tendpoint: `${environment.api}/auth/refresh`,\n * \t\t\t\tsetToken: (response) => service.accessToken$.next(response.accessToken)\n * \t\t\t}\n *\t\t}),\n *\t\tdeps: [TokenStorageService],\n * })\n * ```\n */\nexport interface JwtConfiguration extends Omit<HeaderConfiguration, 'getValue'>, JwtErrorHandling {\n\t/**\n\t * A callback or observable that will be called or subscribed to\n\t * on every http request and returns a value for the header\n\t *\n\t * @example getValue: () => localstorage.get('foo')\n\t * @example getValue: myTokenService.foo$\n\t */\n\tgetToken:\n\t\t| Observable<string | null | undefined>\n\t\t| (() =>\n\t\t\t\t| string\n\t\t\t\t| null\n\t\t\t\t| undefined\n\t\t\t\t| Promise<string | null | undefined>\n\t\t\t\t| Observable<string | null | undefined>);\n\n\t/**\n\t * The prefix of the token when injecting. Notice thet the trailing\n\t * whitespace has to be set here\n\t *\n\t * @default 'Bearer '\n\t */\n\tscheme?: string;\n\n\t/**\n\t * Header name to be set\n\t *\n\t * @default 'Authorization'\n\t */\n\theader: string;\n\n\t/**\n\t * Sets the 'withCredentials' to true along with the token\n\t *\n\t * @default true\n\t */\n\thandleWithCredentials: boolean;\n\n\t/**\n\t * This callback is called when the request fails and there is no\n\t * RefreshConfiguration, or when the access token is simply missing.\n\t * `getToken` returned a nullish value. If the RefreshConfiguration is\n\t * available, then the error handling continues in the same fashion on\n\t * the other configuration.\n\t *\n\t * Both have the same names and signature for\n\t * both the error handling configuration options `onFailure` and\n\t * `onFailureRedirectParameters`, so if you wish to use the same for both\n\t * implement them outside, and spread them back. You can use the\n\t * `JwtErrorHandling` interface to help you with the typing. Although\n\t * thats a bit wider when it comes to the error types.\n\t *\n\t * If it's a string, instead of calling it, a redirection will happen,\n\t * with `onFailureRedirectParameters` as it's queryParams.\n\t */\n\tonFailure?: string | ((jwtError: JwtError) => void);\n\n\tonFailureRedirectParameters?: ((error: JwtError) => HttpParams | Params) | HttpParams | Params;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { HttpErrorResponse, HttpRequest } from '@angular/common/http';\n\nexport class JwtError extends Error {\n\tstatic type = 'JWT_ERROR';\n\n\tpublic constructor(\n\t\tpublic readonly originalRequest: HttpRequest<unknown> | undefined,\n\t\tpublic readonly originalError: unknown,\n\t\tmessage = JwtError.type\n\t) {\n\t\tsuper(message);\n\t}\n\n\tstatic createErrorResponse(\n\t\trequest: HttpRequest<unknown> | undefined,\n\t\trefreshError: unknown\n\t): HttpErrorResponse {\n\t\treturn new HttpErrorResponse({\n\t\t\terror: JwtError.createErrorEvent(request, refreshError),\n\t\t});\n\t}\n\n\tstatic createErrorEvent(\n\t\trequest: HttpRequest<unknown> | undefined,\n\t\trefreshError: unknown\n\t): ErrorEvent {\n\t\treturn new ErrorEvent(JwtError.type, {\n\t\t\terror: new JwtError(request, refreshError),\n\t\t});\n\t}\n}\n\n/**\n * When both access and refresh tokens are either invalid or expired!\n */\nexport class JwtCannotRefreshError extends JwtError {\n\tstatic type = 'JWT_CANNOT_REFRESH_ERROR';\n\n\tpublic constructor(\n\t\tpublic readonly originalRequest: HttpRequest<unknown> | undefined,\n\t\tpublic readonly originalError: unknown\n\t) {\n\t\tsuper(originalRequest, originalError, JwtCannotRefreshError.type);\n\t}\n\n\tstatic createErrorResponse(\n\t\trequest: HttpRequest<unknown> | undefined,\n\t\trefreshError: unknown\n\t): HttpErrorResponse {\n\t\treturn new HttpErrorResponse({\n\t\t\terror: JwtCannotRefreshError.createErrorEvent(request, refreshError),\n\t\t});\n\t}\n\n\tstatic createErrorEvent(\n\t\trequest: HttpRequest<unknown> | undefined,\n\t\trefreshError: unknown\n\t): ErrorEvent {\n\t\treturn new ErrorEvent(JwtCannotRefreshError.type, {\n\t\t\terror: new JwtCannotRefreshError(request, refreshError),\n\t\t});\n\t}\n}\n\n/**\n * When refresh failed\n */\nexport class JwtCouldntRefreshError extends JwtError {\n\tstatic type = 'JWT_COULDNT_REFRESH_ERROR';\n\n\tpublic constructor(\n\t\tpublic readonly originalRequest: HttpRequest<unknown> | undefined,\n\t\tpublic readonly originalError: unknown\n\t) {\n\t\tsuper(originalRequest, originalError, JwtCouldntRefreshError.type);\n\t}\n\n\tstatic createErrorResponse(\n\t\trequest: HttpRequest<unknown> | undefined,\n\t\trefreshError: unknown\n\t): HttpErrorResponse {\n\t\treturn new HttpErrorResponse({\n\t\t\terror: JwtCouldntRefreshError.createErrorEvent(request, refreshError),\n\t\t});\n\t}\n\n\tstatic createErrorEvent(\n\t\trequest: HttpRequest<unknown> | undefined,\n\t\trefreshError: unknown\n\t): ErrorEvent {\n\t\treturn new ErrorEvent(JwtCouldntRefreshError.type, {\n\t\t\terror: new JwtCouldntRefreshError(request, refreshError),\n\t\t});\n\t}\n}\n","export function isNotNullish<T>(t: T | undefined | null): t is T {\n\treturn t !== undefined && t !== null;\n}\n","export function isString(stringLike: unknown): stringLike is string {\n\treturn typeof stringLike === 'string';\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Params, Router } from '@angular/router';\nimport { isString } from '../function/string.predicate';\n\n/**\n * Jwt failures are handled by either calling a callback or if its a string,\n * redirect\n *\n * @internal\n */\nexport function handleJwtFailure<E>(\n\terrorCallbackOrRedirect: string | ((error: E) => void),\n\terror: E,\n\trouter?: Router,\n\tredirectParameters?: ((error: E) => HttpParams | Params) | HttpParams | Params\n): void {\n\tif (isString(errorCallbackOrRedirect)) {\n\t\tif (router) {\n\t\t\tlet queryParams = redirectParameters;\n\t\t\tif (typeof redirectParameters === 'function') {\n\t\t\t\tqueryParams = redirectParameters(error);\n\t\t\t}\n\n\t\t\trouter.navigate([errorCallbackOrRedirect], {\n\t\t\t\tqueryParams,\n\t\t\t});\n\t\t} else {\n\t\t\t// This error is intended to surface as it's a configuration problem\n\t\t\tthrow new Error(\n\t\t\t\t'JWT Refresh configuration error! ' +\n\t\t\t\t\t'`onFailure` is defined as a string, but the ' +\n\t\t\t\t\t'Router is not available! Is @angular/router ' +\n\t\t\t\t\t'installed and the RouterModule imported?'\n\t\t\t);\n\t\t}\n\t} else {\n\t\terrorCallbackOrRedirect(error);\n\t}\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable, throwError } from 'rxjs';\nimport { JwtCannotRefreshError, JwtCouldntRefreshError, JwtError } from '../errors/jwt-error.class';\nimport { isNotNullish } from './is-not-nullish.predicate';\nimport {\n\tJwtConfiguration,\n\tJwtRefreshConfiguration,\n} from '../model/auth-core-configuration.interface';\nimport { handleJwtFailure } from './handle-jwt-failure.function';\n\nexport function handleJwtError<RefreshRequest = unknown, RefreshResponse = unknown>(\n\twrappedError:\n\t\t| (Omit<HttpErrorResponse, 'error'> & {\n\t\t\t\terror?: Omit<ErrorEvent, 'error'> & {\n\t\t\t\t\terror: JwtError | JwtCannotRefreshError | JwtCouldntRefreshError;\n\t\t\t\t};\n\t\t  })\n\t\t| { error?: { error: JwtError | JwtCannotRefreshError | JwtCouldntRefreshError } },\n\tjwtConfiguration: JwtConfiguration,\n\tjwtRefreshConfiguration?: JwtRefreshConfiguration<RefreshRequest, RefreshResponse>,\n\trouter?: Router\n): Observable<never> {\n\tconst error: undefined | JwtError | JwtCannotRefreshError | JwtCouldntRefreshError =\n\t\twrappedError.error?.error;\n\n\tif (error instanceof JwtCannotRefreshError || error instanceof JwtCouldntRefreshError) {\n\t\tif (jwtRefreshConfiguration && isNotNullish(jwtRefreshConfiguration.onFailure)) {\n\t\t\thandleJwtFailure(\n\t\t\t\tjwtRefreshConfiguration.onFailure,\n\t\t\t\terror,\n\t\t\t\trouter,\n\t\t\t\tjwtRefreshConfiguration.onFailureRedirectParameters\n\t\t\t);\n\t\t}\n\t\t// Rethrow the inner error, so observers of the user can see it\n\t\treturn throwError(error);\n\t} else if (error instanceof JwtError) {\n\t\tif (isNotNullish(jwtConfiguration.onFailure)) {\n\t\t\thandleJwtFailure(\n\t\t\t\tjwtConfiguration.onFailure,\n\t\t\t\terror,\n\t\t\t\trouter,\n\t\t\t\tjwtConfiguration.onFailureRedirectParameters\n\t\t\t);\n\t\t}\n\t\treturn throwError(error);\n\t} else {\n\t\t// Other errors are left untreated\n\t\treturn throwError(wrappedError);\n\t}\n}\n","export function isFunction<Return>(funlike: unknown): funlike is () => Return {\n\treturn typeof funlike === 'function';\n}\n","/**\n * Returns true if the object is truthy and has a `then` and a `catch` function.\n * Using `instanceof` would not be sufficient as Promises can be contructed\n * in many ways, and it's just a specification.\n */\nexport function isPromise<T>(promiseLike: unknown): promiseLike is Promise<T> {\n\treturn (\n\t\tpromiseLike &&\n\t\ttypeof (promiseLike as Promise<T>).then === 'function' &&\n\t\ttypeof (promiseLike as Promise<T>).catch === 'function'\n\t);\n}\n","import { from, isObservable, Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { isFunction } from './function.predicate';\nimport { isPromise } from './promise.predicate';\n\n/**\n * Returns a cold observable from a function, or returns an observable if\n * one is directly passed to it\n */\nexport function intoObservable<T>(\n\tgetValue: T | Observable<T> | Promise<T> | (() => T | Promise<T> | Observable<T>)\n): Observable<T> {\n\tif (isObservable(getValue)) {\n\t\treturn getValue;\n\t} else if (isFunction(getValue)) {\n\t\treturn of(null).pipe(\n\t\t\tswitchMap(() => {\n\t\t\t\tconst result = getValue();\n\t\t\t\tif (isObservable(result)) return result;\n\t\t\t\tif (isPromise(result)) return from(result);\n\t\t\t\telse return of(result);\n\t\t\t})\n\t\t);\n\t} else if (isPromise(getValue)) {\n\t\treturn from(getValue);\n\t} else {\n\t\treturn of(getValue);\n\t}\n}\n","import { merge, Observable, of, timer } from 'rxjs';\nimport { mapTo } from 'rxjs/operators';\n\n/**\n * It returns an observable which emits instantly a boolean describing if the\n * timestamp is expired or not. If not, it will emit a second time when it\n * will expire.\n *\n * @param timestamp milliseconds\n */\nexport const isTimestampExpiredNowAndWhenItIs = (timestamp: number): Observable<boolean> => {\n\t// If already expired, just return that\n\tif (timestamp - new Date().getTime() < 0) {\n\t\treturn of(true);\n\t} else {\n\t\t// If not, return that is not and a timer that will emit when it does\n\t\treturn merge(of(false), timer(new Date(timestamp)).pipe(mapTo(true)));\n\t}\n};\n","import { Observable } from 'rxjs';\nimport { isTimestampExpiredNowAndWhenItIs } from './is-timestamp-expired-now-and-when-it-is.function';\n\n/**\n * It returns an observable which emits instantly a boolean describing if the\n * timestamp is expired or not. If not, it will emit a second time when it\n * will expire.\n *\n * @param unixTimestamp seconds from the unix epoch 1970-01-01T00:00:00Z\n * if not supplied it will always be expired\n */\nexport const isUnixTimestampExpiredNowAndWhenItIs = (\n\tunixTimestamp: number\n): Observable<boolean> => {\n\treturn isTimestampExpiredNowAndWhenItIs(Math.floor(unixTimestamp * 1000));\n};\n","import { HttpEvent, HttpEventType, HttpResponse } from '@angular/common/http';\n\nexport function isHttpResponse<T>(httpEvent: HttpEvent<T>): httpEvent is HttpResponse<T> {\n\treturn httpEvent.type === HttpEventType.Response;\n}\n","import { HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, filter, map, mergeMap, tap } from 'rxjs/operators';\nimport {\n\tJwtRefreshConfiguration,\n\tJwtRefreshResponse,\n} from '../model/auth-core-configuration.interface';\nimport { callWhenFunction } from './call-when-function.function';\nimport { isHttpResponse } from './http-response.predicate';\n\nexport function doJwtRefresh<Req, Res, Ret>(\n\tnext: HttpHandler,\n\trequestBody: Req,\n\tjwtRefreshConfiguration: JwtRefreshConfiguration<Req, Res>,\n\tonError: (refreshError: unknown) => Observable<Ret>,\n\toriginalAction: (refreshResponse: JwtRefreshResponse) => Observable<Ret>\n): Observable<Ret> {\n\tconst refreshRequest = new HttpRequest<Req>(\n\t\tjwtRefreshConfiguration.method ?? 'POST',\n\t\tjwtRefreshConfiguration.refreshUrl,\n\t\trequestBody,\n\t\tcallWhenFunction(jwtRefreshConfiguration.refreshRequestInitials)\n\t);\n\n\treturn next.handle(refreshRequest).pipe(\n\t\tfilter(isHttpResponse),\n\t\tmap((response) => jwtRefreshConfiguration.transformRefreshResponse(response.body)),\n\t\ttap((refreshResponse) => jwtRefreshConfiguration.setRefreshedTokens(refreshResponse)),\n\t\tmergeMap((refreshResponse) => originalAction(refreshResponse)),\n\t\tcatchError(onError)\n\t);\n}\n","import { isFunction } from './function.predicate';\n\nexport function callWhenFunction<T = unknown>(functionLike: (() => T) | T): T {\n\tlet result;\n\tif (isFunction<T>(functionLike)) {\n\t\tresult = functionLike();\n\t} else {\n\t\tresult = functionLike;\n\t}\n\treturn result;\n}\n","import { HttpErrorResponse, HttpHandler } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport {\n\tJwtRefreshConfiguration,\n\tJwtRefreshResponse,\n} from '../model/auth-core-configuration.interface';\nimport { checkAgainstHttpErrorFilter } from './check-against-http-error-filter.function';\nimport { doJwtRefresh } from './do-jwt-refresh.function';\nimport { intoObservable } from './into-observable.function';\n\nexport function tryJwtRefresh<Req, Res, Ret>(\n\tnext: HttpHandler,\n\toriginalError: string | HttpErrorResponse,\n\tjwtRefreshConfiguration: JwtRefreshConfiguration<Req, Res>,\n\tonError: (refreshError: unknown) => Observable<Ret>,\n\toriginalAction: (refreshResponse: JwtRefreshResponse) => Observable<Ret>\n): Observable<Ret> {\n\tconst isRefreshAllowed =\n\t\ttypeof originalError === 'string' ||\n\t\tcheckAgainstHttpErrorFilter(jwtRefreshConfiguration, originalError);\n\tif (isRefreshAllowed) {\n\t\treturn intoObservable(jwtRefreshConfiguration.createRefreshRequestBody).pipe(\n\t\t\ttake(1),\n\t\t\tswitchMap((requestBody) => {\n\t\t\t\tif (requestBody) {\n\t\t\t\t\treturn doJwtRefresh(\n\t\t\t\t\t\tnext,\n\t\t\t\t\t\trequestBody,\n\t\t\t\t\t\tjwtRefreshConfiguration,\n\t\t\t\t\t\tonError,\n\t\t\t\t\t\toriginalAction\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn throwError(originalError);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t} else return throwError(originalError);\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { HttpErrorFilter } from '../model/auth-core-configuration.interface';\n\n/**\n * Matches the filter against an error response. Non-existend rulesets\n * automatically pass. **Empty whitelist rulesets never pass.** Empty blacklist\n * rulesets always pass.\n */\nexport function checkAgainstHttpErrorFilter(\n\thttpErrorFilter: HttpErrorFilter,\n\terror: HttpErrorResponse\n): boolean {\n\tconst statusMatcher = (code: number) => code === error.status;\n\tconst errorCodeWhitelistRulesPass =\n\t\thttpErrorFilter.errorCodeWhitelist?.some(statusMatcher) ?? true;\n\n\tconst errorCodeBlacklistRulesPass = !httpErrorFilter.errorCodeBlacklist?.some(statusMatcher);\n\n\treturn errorCodeWhitelistRulesPass && errorCodeBlacklistRulesPass;\n}\n","import { Base64 } from 'js-base64';\n\nexport type Base64String = string;\nexport type JsonString = string;\n\n/**\n *\n * @param str json encoded in Base64\n */\nexport const decodeJsonLikeBase64 = <T = Record<string, unknown>>(str: Base64String): T | null => {\n\ttry {\n\t\treturn JSON.parse(Base64.decode(str));\n\t} catch (error) {\n\t\tconsole.error('Invalid Jsonlike Base64 string', error);\n\t\treturn null;\n\t}\n};\n","import { Base64 } from 'js-base64';\nimport { Base64String, decodeJsonLikeBase64 } from '../function/base64-decoder.function';\nimport { isUnixTimestampExpired } from '../function/is-unix-timestamp-expired.function';\n\nexport type JwtTokenString = string;\nexport type UnixTime = number;\n\nexport interface JwtTokenHeader {\n\t/**\n\t * Media type\n\t */\n\ttyp?: string;\n\t/**\n\t * Content Type\n\t */\n\tcty?: 'JWT' | string;\n\t/**\n\t * Algorithm\n\t */\n\talg: string;\n\t/**\n\t * Encryption\n\t */\n\tenc?: string;\n}\n\n/**\n * Registered claim names defined in RFC 7519 are predefined here.\n */\nexport interface JwtTokenPayload {\n\t/**\n\t * Issuer\n\t */\n\tiss?: string;\n\t/**\n\t * Subject\n\t */\n\tsub?: string;\n\t/**\n\t * Audience\n\t */\n\taud?: string;\n\t/**\n\t * Expiration Time\n\t */\n\texp: UnixTime;\n\t/**\n\t * Not Before\n\t */\n\tnbf?: UnixTime;\n\t/**\n\t * Issued at\n\t */\n\tiat?: UnixTime;\n\t/**\n\t * JWT ID\n\t */\n\tjti?: string;\n}\n\n/**\n * Common token pair\n */\nexport interface JwtTokenPair {\n\taccessToken: JwtTokenString;\n\trefreshToken: JwtTokenString;\n}\n\nexport class JwtToken<Claims = Record<string | number, unknown>> {\n\tpublic constructor(\n\t\tpublic header: JwtTokenHeader,\n\t\tpublic payload: JwtTokenPayload & Claims,\n\t\tpublic signature: string\n\t) {}\n\tpublic static JWT_TOKEN_SEPARATOR = '.';\n\n\tpublic static from<Claims = Record<string | number, unknown>>(\n\t\ttoken: JwtTokenString\n\t): JwtToken<Claims> | null {\n\t\tconst convertedSegments = JwtToken.splitTokenString(token);\n\t\tif (!convertedSegments) return null;\n\n\t\tconst header = decodeJsonLikeBase64<JwtTokenHeader>(convertedSegments[0]);\n\t\tconst payload = decodeJsonLikeBase64<JwtTokenPayload & Claims>(convertedSegments[1]);\n\t\tconst signature = Base64.decode(convertedSegments[2]); // Not used, only for validation\n\t\tif (!header || !payload || !signature) return null;\n\n\t\treturn new JwtToken<Claims>(header, payload, signature);\n\t}\n\n\tpublic static stripScheme(jwtHeaderValue: string, scheme?: string): JwtTokenString {\n\t\treturn jwtHeaderValue.substring((scheme ?? '').length);\n\t}\n\n\tpublic static splitTokenString(\n\t\ttoken: JwtTokenString,\n\t\tseparator: string = JwtToken.JWT_TOKEN_SEPARATOR\n\t): [Base64String, Base64String, Base64String] | null {\n\t\tconst spl = token.split(separator);\n\t\tif (spl.length !== 3) {\n\t\t\treturn null;\n\t\t}\n\t\treturn spl as [Base64String, Base64String, Base64String];\n\t}\n\n\tpublic isExpired(): boolean {\n\t\treturn isUnixTimestampExpired(this.payload.exp);\n\t}\n}\n","import { InjectionToken } from '@angular/core';\nimport {\n\tJwtConfiguration,\n\tJwtRefreshConfiguration,\n} from '../model/auth-core-configuration.interface';\nimport { TypedProvider } from '../model/typed-providers.interface';\n\nexport const JWT_CONFIGURATION_TOKEN = new InjectionToken<JwtConfiguration>(\n\t'AegisJwtConfiguration'\n);\n\nexport const DEFAULT_JWT_CONFIGURATION_TOKEN = new InjectionToken<Partial<JwtConfiguration>>(\n\t'DefaultAegisJwtConfiguration'\n);\n\nexport const JWT_REFRESH_CONFIGURATION_TOKEN = new InjectionToken<\n\tJwtRefreshConfiguration<unknown, unknown>\n>('AegisJwtRefreshConfiguration');\n\nexport const DEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN = new InjectionToken<\n\tPartial<JwtRefreshConfiguration<unknown, unknown>>\n>('DefaultAegisJwtRefreshConfiguration');\n\n/**\n * To provide an {@link AuthTokenConfiguration |  AuthTokenConfiguration}\n */\nexport type JwtConfigurationProvider<> = TypedProvider<JwtConfiguration>;\n\n/**\n * To provide an {@link AuthTokenConfiguration |  AuthTokenConfiguration}\n */\nexport type JwtRefreshConfigurationProvider<RefreshRequest, RefreshResponse> = TypedProvider<\n\tJwtRefreshConfiguration<RefreshRequest, RefreshResponse>\n>;\n\n/**\n * This type describes a providerlike object that doesn't have a provide field\n * because that will be defaulted by the\n * {@link createRefreshableAuthTokenProvider | createRefreshableAuthTokenProvider }\n * function\n */\nexport type JwtModuleConfigurationProvider = Partial<\n\tOmit<TypedProvider<Partial<JwtConfiguration>>, 'provide' | 'multi'>\n>;\n\nexport type JwtModuleRefreshConfigurationProvider<RefreshRequest, RefreshResponse> = Partial<\n\tOmit<\n\t\tTypedProvider<Partial<JwtRefreshConfiguration<RefreshRequest, RefreshResponse>>>,\n\t\t'provide' | 'multi'\n\t>\n>;\n","import { HttpHandler } from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { JwtCouldntRefreshError } from '../errors/jwt-error.class';\nimport { handleJwtError } from '../function/handle-jwt-error.function';\nimport { intoObservable } from '../function/into-observable.function';\nimport { isNotNullish } from '../function/is-not-nullish.predicate';\nimport { isUnixTimestampExpiredNowAndWhenItIs } from '../function/is-unix-timestamp-expired-now-and-when-it-is.function';\nimport { isString } from '../function/string.predicate';\nimport { tryJwtRefresh } from '../function/try-jwt-refresh.function';\nimport {\n\tJwtConfiguration,\n\tJwtRefreshConfiguration,\n} from '../model/auth-core-configuration.interface';\nimport { JwtToken } from '../model/jwt-token.class';\nimport {\n\tDEFAULT_JWT_CONFIGURATION_TOKEN,\n\tDEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN,\n\tJWT_CONFIGURATION_TOKEN,\n\tJWT_REFRESH_CONFIGURATION_TOKEN,\n} from '../token/jwt-configuration.token';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class JwtTokenService<\n\tClaims = Record<string | number, unknown>,\n\tRefreshClaims = Record<string | number, unknown>,\n\tRefreshRequest = Record<string | number, unknown>,\n\tRefreshResponse = Record<string | number, unknown>\n> {\n\tpublic constructor(\n\t\tprivate readonly httpHandler: HttpHandler,\n\t\t@Inject(JWT_CONFIGURATION_TOKEN)\n\t\tprivate readonly rawConfig: JwtConfiguration,\n\t\t@Inject(DEFAULT_JWT_CONFIGURATION_TOKEN)\n\t\tprivate readonly rawDefaultConfig: JwtConfiguration,\n\t\t@Inject(DEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN)\n\t\t@Optional()\n\t\tprivate readonly rawDefaultRefreshConfig?: JwtRefreshConfiguration<\n\t\t\tRefreshRequest,\n\t\t\tRefreshResponse\n\t\t>,\n\t\t@Inject(JWT_REFRESH_CONFIGURATION_TOKEN)\n\t\t@Optional()\n\t\tprivate readonly rawRefreshConfig?: JwtRefreshConfiguration<\n\t\t\tRefreshRequest,\n\t\t\tRefreshResponse\n\t\t>,\n\t\t@Optional() private readonly router?: Router\n\t) {}\n\tpublic readonly config: JwtConfiguration = {\n\t\t...this.rawDefaultConfig,\n\t\t...this.rawConfig,\n\t};\n\n\tpublic readonly refreshConfig?: JwtRefreshConfiguration<RefreshRequest, RefreshResponse> =\n\t\tthis.rawDefaultRefreshConfig && this.rawRefreshConfig\n\t\t\t? {\n\t\t\t\t\t...this.rawDefaultRefreshConfig,\n\t\t\t\t\t...this.rawRefreshConfig,\n\t\t\t  }\n\t\t\t: undefined;\n\n\t/**\n\t * Consider restricting getToken to observables only so things can be cached\n\t */\n\tpublic readonly rawAccessToken$ = intoObservable(this.config.getToken);\n\n\tpublic readonly rawRefreshToken$ = this.refreshConfig?.getRefreshToken\n\t\t? intoObservable(this.refreshConfig.getRefreshToken)\n\t\t: of(null);\n\n\tpublic readonly accessToken$ = this.rawAccessToken$.pipe(\n\t\tmap((token) => {\n\t\t\tif (isString(token)) {\n\t\t\t\tconst jwtToken = JwtToken.from<Claims>(token);\n\t\t\t\tif (!jwtToken) throw new Error('Non-valid token observed');\n\t\t\t\telse return jwtToken;\n\t\t\t} else return null;\n\t\t})\n\t);\n\n\tpublic readonly refreshToken$ = this.rawRefreshToken$.pipe(\n\t\tmap((refreshToken) => {\n\t\t\tif (isString(refreshToken)) {\n\t\t\t\tconst jwtToken = JwtToken.from<RefreshClaims>(refreshToken);\n\t\t\t\tif (!jwtToken) throw new Error('Non-valid token observed');\n\t\t\t\telse return jwtToken;\n\t\t\t} else return null;\n\t\t})\n\t);\n\n\tpublic readonly accessTokenHeader$ = this.accessToken$.pipe(\n\t\tmap((token) => token?.header ?? null)\n\t);\n\n\tpublic readonly accessTokenPayload$ = this.accessToken$.pipe(\n\t\tmap((token) => token?.payload ?? null)\n\t);\n\n\tpublic readonly refreshTokenHeader$ = this.refreshToken$.pipe(\n\t\tmap((token) => token?.header ?? null)\n\t);\n\n\tpublic readonly refreshTokenPayload$ = this.refreshToken$.pipe(\n\t\tmap((token) => token?.payload ?? null)\n\t);\n\n\tpublic readonly isAccessTokenExpired$ = this.accessToken$.pipe(\n\t\tswitchMap((token) =>\n\t\t\ttoken ? isUnixTimestampExpiredNowAndWhenItIs(token.payload.exp) : of(null)\n\t\t)\n\t);\n\n\tpublic readonly isRefreshTokenExpired$ = this.refreshToken$.pipe(\n\t\tswitchMap((token) =>\n\t\t\ttoken ? isUnixTimestampExpiredNowAndWhenItIs(token.payload.exp) : of(null)\n\t\t)\n\t);\n\n\tpublic readonly isAccessTokenValid$ = this.isAccessTokenExpired$.pipe(\n\t\tmap((isExpired) => isNotNullish(isExpired) && !isExpired)\n\t);\n\n\tpublic readonly isRefreshTokenValid$ = this.isRefreshTokenExpired$.pipe(\n\t\tmap((isExpired) => isNotNullish(isExpired) && !isExpired)\n\t);\n\n\t/**\n\t * Does a token refresh. Emits false if it failed, or true if succeeded.\n\t */\n\tpublic manualRefresh(): Observable<boolean> {\n\t\tif (this.refreshConfig) {\n\t\t\treturn tryJwtRefresh(\n\t\t\t\tthis.httpHandler,\n\t\t\t\t'Access token not valid on guard activation',\n\t\t\t\tthis.refreshConfig,\n\t\t\t\t(refreshError) =>\n\t\t\t\t\thandleJwtError<RefreshRequest, RefreshResponse>(\n\t\t\t\t\t\tJwtCouldntRefreshError.createErrorResponse(undefined, refreshError),\n\t\t\t\t\t\tthis.config,\n\t\t\t\t\t\tthis.refreshConfig,\n\t\t\t\t\t\tthis.router\n\t\t\t\t\t).pipe(catchError(() => of(false))),\n\t\t\t\t() => of(true)\n\t\t\t);\n\t\t} else {\n\t\t\treturn of(false);\n\t\t}\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport {\n\tActivatedRouteSnapshot,\n\tCanActivate,\n\tCanActivateChild,\n\tCanLoad,\n\tRoute,\n\tRouterStateSnapshot,\n\tUrlSegment,\n\tUrlTree,\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { DEFAULT_JWT_REFRESH_CONFIG_DEFAULT_AUTO_IN_GUARD } from '../model/auth-core-configuration.interface';\nimport { JwtTokenService } from '../service/jwt-token.service';\n\n/**\n * This interface is for your convinience to use with Route data to see what\n * you can configure on the LoginGuard\n */\nexport interface LoginGuardData {\n\t/**\n\t * Explicitly enable or disable auto refreshing on the route.\n\t */\n\tisRefreshAllowed: boolean;\n}\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class LoginGuard implements CanActivate, CanActivateChild, CanLoad {\n\tprivate isAccessTokenValidOnce$ = this.jwtTokenService.isAccessTokenValid$.pipe(take(1));\n\n\tpublic constructor(private readonly jwtTokenService: JwtTokenService) {}\n\n\tprivate isValid(isRefreshAllowed: boolean | undefined): Observable<boolean> {\n\t\tconst allowed =\n\t\t\tisRefreshAllowed ??\n\t\t\tthis.jwtTokenService.refreshConfig?.isAutoRefreshAllowedInLoginGuardByDefault ??\n\t\t\tDEFAULT_JWT_REFRESH_CONFIG_DEFAULT_AUTO_IN_GUARD;\n\t\treturn this.isAccessTokenValidOnce$.pipe(\n\t\t\tswitchMap((isValid) => {\n\t\t\t\tif (!isValid && allowed) {\n\t\t\t\t\treturn this.jwtTokenService.manualRefresh();\n\t\t\t\t} else {\n\t\t\t\t\treturn of(isValid);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tpublic canActivate(\n\t\troute: ActivatedRouteSnapshot,\n\t\t_state: RouterStateSnapshot\n\t): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\t\tconst data = route.data as LoginGuardData | undefined;\n\t\treturn this.isValid(data?.isRefreshAllowed);\n\t}\n\n\tpublic canActivateChild(\n\t\tchildRoute: ActivatedRouteSnapshot,\n\t\t_state: RouterStateSnapshot\n\t): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\t\tconst data = childRoute.data as LoginGuardData | undefined;\n\t\treturn this.isValid(data?.isRefreshAllowed);\n\t}\n\n\tpublic canLoad(\n\t\troute: Route,\n\t\t_segments: UrlSegment[]\n\t): Observable<boolean> | Promise<boolean> | boolean {\n\t\tconst data = route.data as LoginGuardData | undefined;\n\t\treturn this.isValid(data?.isRefreshAllowed);\n\t}\n}\n","import {\n\tHttpErrorResponse,\n\tHttpEvent,\n\tHttpHandler,\n\tHttpInterceptor,\n\tHttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { handleJwtError } from '../function/handle-jwt-error.function';\nimport {\n\tJwtConfiguration,\n\tJwtRefreshConfiguration,\n} from '../model/auth-core-configuration.interface';\nimport {\n\tDEFAULT_JWT_CONFIGURATION_TOKEN,\n\tDEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN,\n\tJWT_CONFIGURATION_TOKEN,\n\tJWT_REFRESH_CONFIGURATION_TOKEN,\n} from '../token/jwt-configuration.token';\n\n/**\n * If configured, handles authentication errors with custom callbacks\n * or redirects\n */\n@Injectable()\nexport class JwtErrorHandlingInterceptor implements HttpInterceptor {\n\tprivate readonly jwtConfiguration: JwtConfiguration;\n\tprivate readonly jwtRefreshConfiguration?: JwtRefreshConfiguration<unknown, unknown>;\n\tpublic constructor(\n\t\t@Inject(JWT_CONFIGURATION_TOKEN)\n\t\tjwtConfig: JwtConfiguration,\n\t\t@Inject(DEFAULT_JWT_CONFIGURATION_TOKEN)\n\t\tdefaultJwtConfig: JwtConfiguration,\n\t\t@Optional()\n\t\t@Inject(JWT_REFRESH_CONFIGURATION_TOKEN)\n\t\trefreshConfig?: JwtRefreshConfiguration<unknown, unknown>,\n\t\t@Optional()\n\t\t@Inject(DEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN)\n\t\tdefaultJwtRefreshConfig?: JwtRefreshConfiguration<unknown, unknown>,\n\t\t@Optional() private readonly router?: Router\n\t) {\n\t\tthis.jwtConfiguration = {\n\t\t\t...defaultJwtConfig,\n\t\t\t...jwtConfig,\n\t\t};\n\n\t\tthis.jwtRefreshConfiguration =\n\t\t\tdefaultJwtRefreshConfig && refreshConfig\n\t\t\t\t? {\n\t\t\t\t\t\t...defaultJwtRefreshConfig,\n\t\t\t\t\t\t...refreshConfig,\n\t\t\t\t  }\n\t\t\t\t: undefined;\n\t}\n\tpublic intercept(\n\t\trequest: HttpRequest<unknown>,\n\t\tnext: HttpHandler\n\t): Observable<HttpEvent<unknown>> {\n\t\treturn next\n\t\t\t.handle(request)\n\t\t\t.pipe(\n\t\t\t\tcatchError((errorResponse: HttpErrorResponse) =>\n\t\t\t\t\thandleJwtError(\n\t\t\t\t\t\terrorResponse,\n\t\t\t\t\t\tthis.jwtConfiguration,\n\t\t\t\t\t\tthis.jwtRefreshConfiguration,\n\t\t\t\t\t\tthis.router\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t}\n}\n","import { isString } from './string.predicate';\n\nexport const matchRule = (rule: string | RegExp, against?: string | null): boolean => {\n\tif (isString(rule)) return rule === against;\n\telse if (against) return rule.test(against);\n\telse return false;\n};\n\n/**\n *\n * @param inverse easy negating when composing\n */\nexport const matchAgainst = (against?: string | null, inverse = false) => (\n\trule: string | RegExp\n): boolean => (inverse ? !matchRule(rule, against) : matchRule(rule, against));\n","import { UrlFilter } from '../model/header-configuration.interface';\nimport { matchAgainst } from './match-against.function';\nimport { SeparatedUrl } from './separate-url.function';\n\n/**\n * Matches the filter against a separated url. Non-existend rulesets\n * automatically pass. **Empty whitelist rulesets never pass.** Empty blacklist\n * rulesets always pass.\n */\nexport function checkAgainstUrlFilter(\n\turlFilter: UrlFilter,\n\t{ domain, path, protocol }: SeparatedUrl\n): boolean {\n\tconst protocolMatcher = matchAgainst(protocol);\n\tconst domainMatcher = matchAgainst(domain);\n\tconst pathMatcher = matchAgainst(path);\n\n\tconst protocolWhitelistRulesPass = urlFilter.protocolWhitelist?.some(protocolMatcher) ?? true;\n\n\tconst protocolBlacklistRulesPass = !urlFilter.protocolBlacklist?.some(protocolMatcher);\n\n\tconst domainWhitelistRulesPass = urlFilter.domainWhitelist?.some(domainMatcher) ?? true;\n\n\tconst domainBlacklistRulesPass = !urlFilter.domainBlacklist?.some(domainMatcher);\n\n\tconst pathWhitelistRulesPass = urlFilter.pathWhitelist?.some(pathMatcher) ?? true;\n\n\tconst pathBlacklistRulesPass = !urlFilter.pathBlacklist?.some(pathMatcher);\n\n\treturn (\n\t\tprotocolWhitelistRulesPass &&\n\t\tprotocolBlacklistRulesPass &&\n\t\tdomainWhitelistRulesPass &&\n\t\tdomainBlacklistRulesPass &&\n\t\tpathWhitelistRulesPass &&\n\t\tpathBlacklistRulesPass\n\t);\n}\n","export type UrlProtocol = string;\nexport type UrlDomain = string;\nexport type UrlPath = string;\n\n/**\n * An url separated into optional parts, the separators are not included.\n * Separator between protocol and domain is `://`, and between domain\n * and path is `/`.\n */\nexport interface SeparatedUrl {\n\t/**\n\t * @example `http`\n\t */\n\tprotocol?: UrlProtocol;\n\n\t/**\n\t * @example `localhost`\n\t */\n\tdomain?: UrlDomain;\n\n\t/**\n\t * @example `foo/bar`\n\t */\n\tpath?: UrlPath;\n}\n\n/**\n * Returns the url split into parts, without the separators.\n * Separator between protocol and domain is `://`, and between domain\n * and path is `/`.\n */\nexport function separateUrl(url?: string): SeparatedUrl {\n\tconst urlMatch = url?.match(/^((.*):\\/\\/)?([^/].*?)?(\\/(.*))?$/);\n\treturn {\n\t\tprotocol: urlMatch?.[2] as UrlProtocol,\n\t\tdomain: urlMatch?.[3] as UrlDomain,\n\t\tpath: urlMatch?.[5] as UrlPath,\n\t};\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { JwtError } from '../errors/jwt-error.class';\nimport { checkAgainstUrlFilter } from '../function/check-against-url-filter.function';\nimport { intoObservable } from '../function/into-observable.function';\nimport { separateUrl } from '../function/separate-url.function';\nimport {\n\tJwtConfiguration,\n\tJwtRefreshConfiguration,\n} from '../model/auth-core-configuration.interface';\nimport { JwtToken } from '../model/jwt-token.class';\nimport {\n\tDEFAULT_JWT_CONFIGURATION_TOKEN,\n\tDEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN,\n\tJWT_CONFIGURATION_TOKEN,\n\tJWT_REFRESH_CONFIGURATION_TOKEN,\n} from '../token/jwt-configuration.token';\n\n@Injectable()\nexport class JwtInjectorInterceptor implements HttpInterceptor {\n\tprivate readonly jwtConfiguration!: JwtConfiguration;\n\tprivate readonly jwtRefreshConfiguration?: JwtRefreshConfiguration<unknown, unknown>;\n\n\tpublic constructor(\n\t\t@Inject(JWT_CONFIGURATION_TOKEN)\n\t\tjwtConfig: JwtConfiguration,\n\t\t@Inject(DEFAULT_JWT_CONFIGURATION_TOKEN)\n\t\tdefaultJwtConfig: JwtConfiguration,\n\t\t@Optional()\n\t\t@Inject(JWT_REFRESH_CONFIGURATION_TOKEN)\n\t\trefreshConfig?: JwtRefreshConfiguration<unknown, unknown>,\n\t\t@Optional()\n\t\t@Inject(DEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN)\n\t\tdefaultJwtRefreshConfig?: JwtRefreshConfiguration<unknown, unknown>\n\t) {\n\t\tthis.jwtConfiguration = {\n\t\t\t...defaultJwtConfig,\n\t\t\t...jwtConfig,\n\t\t};\n\n\t\tthis.jwtRefreshConfiguration = refreshConfig &&\n\t\t\tdefaultJwtRefreshConfig && {\n\t\t\t\t...defaultJwtRefreshConfig,\n\t\t\t\t...refreshConfig,\n\t\t\t};\n\t}\n\n\tpublic intercept(\n\t\trequest: HttpRequest<unknown>,\n\t\tnext: HttpHandler\n\t): Observable<HttpEvent<unknown>> {\n\t\tconst separatedUrl = separateUrl(request.url);\n\t\treturn intoObservable(this.jwtConfiguration.getToken).pipe(\n\t\t\ttake(1),\n\t\t\tswitchMap((rawToken) => {\n\t\t\t\tif (checkAgainstUrlFilter(this.jwtConfiguration, separatedUrl)) {\n\t\t\t\t\tconst token = rawToken && JwtToken.from(rawToken);\n\t\t\t\t\tconst isAccessTokenExpiredOrInvalid = !token || token.isExpired();\n\t\t\t\t\t// If there is a token to inject\n\t\t\t\t\tif (\n\t\t\t\t\t\trawToken &&\n\t\t\t\t\t\t(!isAccessTokenExpiredOrInvalid || this.jwtRefreshConfiguration)\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet cloned = request.clone({\n\t\t\t\t\t\t\theaders: request.headers.set(\n\t\t\t\t\t\t\t\tthis.jwtConfiguration.header,\n\t\t\t\t\t\t\t\tthis.jwtConfiguration.scheme\n\t\t\t\t\t\t\t\t\t? this.jwtConfiguration.scheme + rawToken\n\t\t\t\t\t\t\t\t\t: rawToken\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (this.jwtConfiguration.handleWithCredentials) {\n\t\t\t\t\t\t\tcloned = cloned.clone({\n\t\t\t\t\t\t\t\twithCredentials: true,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn next.handle(cloned);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn throwError(\n\t\t\t\t\t\t\tJwtError.createErrorResponse(\n\t\t\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\t\t'Token is expired or invalid, and refresh is not configured.'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else return next.handle(request);\n\t\t\t})\n\t\t);\n\t}\n}\n","import {\n\tHttpErrorResponse,\n\tHttpEvent,\n\tHttpHandler,\n\tHttpInterceptor,\n\tHttpRequest,\n} from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, switchMap, take } from 'rxjs/operators';\nimport { JwtCannotRefreshError, JwtCouldntRefreshError } from '../errors/jwt-error.class';\nimport { checkAgainstUrlFilter } from '../function/check-against-url-filter.function';\nimport { intoObservable } from '../function/into-observable.function';\nimport { matchAgainst } from '../function/match-against.function';\nimport { tryJwtRefresh } from '../function/try-jwt-refresh.function';\nimport { separateUrl } from '../function/separate-url.function';\nimport {\n\tJwtConfiguration,\n\tJwtRefreshConfiguration,\n} from '../model/auth-core-configuration.interface';\nimport { JwtToken } from '../model/jwt-token.class';\nimport {\n\tDEFAULT_JWT_CONFIGURATION_TOKEN,\n\tDEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN,\n\tJWT_CONFIGURATION_TOKEN,\n\tJWT_REFRESH_CONFIGURATION_TOKEN,\n} from '../token/jwt-configuration.token';\n\n@Injectable()\nexport class JwtRefreshInterceptor implements HttpInterceptor {\n\tprivate readonly jwtConfiguration!: JwtConfiguration;\n\tprivate readonly jwtRefreshConfiguration!: JwtRefreshConfiguration<unknown, unknown>;\n\tprivate readonly rawRefreshToken$: Observable<string | null | undefined>;\n\tprivate readonly isRawRefreshTokenGetterAvailable: boolean;\n\n\tpublic constructor(\n\t\t@Inject(JWT_CONFIGURATION_TOKEN)\n\t\tjwtConfig: JwtConfiguration,\n\t\t@Inject(DEFAULT_JWT_CONFIGURATION_TOKEN)\n\t\tdefaultJwtConfig: JwtConfiguration,\n\t\t@Inject(JWT_REFRESH_CONFIGURATION_TOKEN)\n\t\trefreshConfig: JwtRefreshConfiguration<unknown, unknown>,\n\t\t@Inject(DEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN)\n\t\tdefaultJwtRefreshConfig: JwtRefreshConfiguration<unknown, unknown>\n\t) {\n\t\tthis.jwtConfiguration = {\n\t\t\t...defaultJwtConfig,\n\t\t\t...jwtConfig,\n\t\t};\n\n\t\tthis.jwtRefreshConfiguration = {\n\t\t\t...defaultJwtRefreshConfig,\n\t\t\t...refreshConfig,\n\t\t};\n\n\t\tthis.rawRefreshToken$ = intoObservable(\n\t\t\tthis.jwtRefreshConfiguration.getRefreshToken ?? (() => null)\n\t\t);\n\n\t\tthis.isRawRefreshTokenGetterAvailable = !!this.jwtRefreshConfiguration.getRefreshToken;\n\t}\n\n\tpublic intercept(\n\t\trequest: HttpRequest<unknown>,\n\t\tnext: HttpHandler\n\t): Observable<HttpEvent<unknown>> {\n\t\tconst separatedUrl = separateUrl(request.url);\n\t\tconst jwtHeaderValue = request.headers.get(this.jwtConfiguration.header);\n\n\t\t// Only do something if the request is headed towards a protected endpoint.\n\t\t// The forRoot method of the module ensures that this interceptor is injected\n\t\t// after the token injector interceptor. So by the time this executes, the token should\n\t\t// be here.\n\t\t// And if the url is not the refresh url itself, and any of the other explicitly\n\t\t// filtered urls where refresh is prohibited by config.\n\t\tif (\n\t\t\tjwtHeaderValue &&\n\t\t\t!matchAgainst(request.url)(this.jwtRefreshConfiguration.refreshUrl) &&\n\t\t\tcheckAgainstUrlFilter(this.jwtRefreshConfiguration, separatedUrl)\n\t\t) {\n\t\t\treturn this.rawRefreshToken$.pipe(\n\t\t\t\ttake(1),\n\t\t\t\tswitchMap((rawRefreshToken) => {\n\t\t\t\t\tconst rawToken = JwtToken.stripScheme(\n\t\t\t\t\t\tjwtHeaderValue,\n\t\t\t\t\t\tthis.jwtConfiguration.scheme\n\t\t\t\t\t);\n\t\t\t\t\tconst token = JwtToken.from(rawToken);\n\t\t\t\t\tconst refreshToken = rawRefreshToken ? JwtToken.from(rawRefreshToken) : null;\n\t\t\t\t\tconst isAccessTokenExpiredOrInvalid = !token || token.isExpired();\n\t\t\t\t\tconst isRefreshTokenExpiredOrInvalid =\n\t\t\t\t\t\t!refreshToken || refreshToken.isExpired();\n\t\t\t\t\t// If we know beforehand that nothing can be done, panic.\n\t\t\t\t\tif (\n\t\t\t\t\t\tisAccessTokenExpiredOrInvalid &&\n\t\t\t\t\t\tthis.isRawRefreshTokenGetterAvailable &&\n\t\t\t\t\t\tisRefreshTokenExpiredOrInvalid\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn throwError(\n\t\t\t\t\t\t\tJwtCannotRefreshError.createErrorResponse(\n\t\t\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\t\t'Both access and refresh tokens are expired'\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the conversion would fail, that would handle the same as an expired token\n\t\t\t\t\treturn (isAccessTokenExpiredOrInvalid\n\t\t\t\t\t\t? // If the token is used and is expired, don't even try the request.\n\t\t\t\t\t\t  throwError('Expired token, refresh first')\n\t\t\t\t\t\t: // If it seems okay, try the request\n\t\t\t\t\t\t  next.handle(request)\n\t\t\t\t\t).pipe(\n\t\t\t\t\t\tcatchError((error: HttpErrorResponse | string) => {\n\t\t\t\t\t\t\t// If the request failed, or we failed at the precheck\n\t\t\t\t\t\t\t// Acquire a new token, but only if the error is allowing it\n\n\t\t\t\t\t\t\treturn tryJwtRefresh(\n\t\t\t\t\t\t\t\tnext,\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\tthis.jwtRefreshConfiguration,\n\t\t\t\t\t\t\t\t(refreshError) =>\n\t\t\t\t\t\t\t\t\tthrowError(\n\t\t\t\t\t\t\t\t\t\tJwtCouldntRefreshError.createErrorResponse(\n\t\t\t\t\t\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\t\t\t\t\trefreshError\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t(refreshResponse) => {\n\t\t\t\t\t\t\t\t\tconst requestWithUpdatedTokens = request.clone({\n\t\t\t\t\t\t\t\t\t\theaders: request.headers.set(\n\t\t\t\t\t\t\t\t\t\t\tthis.jwtConfiguration.header,\n\t\t\t\t\t\t\t\t\t\t\tthis.jwtConfiguration.scheme +\n\t\t\t\t\t\t\t\t\t\t\t\trefreshResponse.accessToken\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\treturn next.handle(requestWithUpdatedTokens);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t);\n\t\t} else return next.handle(request);\n\t}\n}\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { JwtErrorHandlingInterceptor } from './interceptor/jwt-error-handling.interceptor';\nimport { JwtInjectorInterceptor } from './interceptor/jwt-injector.interceptor';\nimport { JwtRefreshInterceptor } from './interceptor/jwt-refresh.interceptor';\nimport {\n\tDEFAULT_JWT_CONFIG,\n\tDEFAULT_JWT_REFRESH_CONFIG,\n} from './model/auth-core-configuration.interface';\nimport {\n\tDEFAULT_JWT_CONFIGURATION_TOKEN,\n\tDEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN,\n\tJwtConfigurationProvider,\n\tJwtModuleConfigurationProvider,\n\tJwtModuleRefreshConfigurationProvider,\n\tJwtRefreshConfigurationProvider,\n\tJWT_CONFIGURATION_TOKEN,\n\tJWT_REFRESH_CONFIGURATION_TOKEN,\n} from './token/jwt-configuration.token';\n\n/**\n * Helps you define a JwtConfigurationProvider\n *\n * @internal\n */\nexport function createJwtConfigurationProvider(\n\ttokenConfigurationProvider: JwtModuleConfigurationProvider\n): JwtConfigurationProvider {\n\treturn {\n\t\tprovide: JWT_CONFIGURATION_TOKEN,\n\t\tmulti: false,\n\t\t...tokenConfigurationProvider,\n\t} as JwtConfigurationProvider;\n}\n\n/**\n * Helps you define a JwtConfigurationProvider\n *\n * @internal\n */\nexport function createJwtRefreshConfigurationProvider<RefreshRequest, RefreshResponse>(\n\ttokenRefreshConfigurationProvider: JwtModuleRefreshConfigurationProvider<\n\t\tRefreshRequest,\n\t\tRefreshResponse\n\t>\n): JwtRefreshConfigurationProvider<RefreshRequest, RefreshResponse> {\n\treturn {\n\t\tprovide: JWT_REFRESH_CONFIGURATION_TOKEN,\n\t\tmulti: false,\n\t\t...tokenRefreshConfigurationProvider,\n\t} as JwtRefreshConfigurationProvider<RefreshRequest, RefreshResponse>;\n}\n\n/**\n * This module needs to be configured to use. See the\n * {@link JwtModule#forRoot | forRoot} method for more information.\n *\n * tokens. So that other, plug in configration modules can provide them.\n * Like Ngrx and Local. They then transform their configs into this common one.\n */\n@NgModule({\n\timports: [CommonModule],\n})\nexport class JwtModule {\n\t/**\n\t * To define the interceptors and the token with the provided config.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * (a)NgModule({\n\t *\t\timports: [\n\t *\t\t\tJwtModule.forRoot<Foo>({\n\t *\t\t\t\t\tuseFactory: (foo) => foo.getConf(),\n\t *\t\t\t\t\tdeps: [Foo] // if something has to be injected\n\t *\t\t\t})\n\t *\t\t]\n\t *\t})\n\t *\texport class CoreModule {}\n\t * ```\n\t * @param tokenProvider create with `createAuthTokenProvider` or\n\t * \t`createRefreshableAuthTokenProvider`\n\t */\n\tpublic static forRoot(\n\t\tjwtModuleConfigurationProvider: JwtModuleConfigurationProvider\n\t): ModuleWithProviders<JwtModule>;\n\tpublic static forRoot<RefreshRequest, RefreshResponse>(\n\t\tjwtModuleConfigurationProvider: JwtModuleConfigurationProvider,\n\t\tjwtRefreshConfigurationProvider: JwtModuleRefreshConfigurationProvider<\n\t\t\tRefreshRequest,\n\t\t\tRefreshResponse\n\t\t>\n\t): ModuleWithProviders<JwtModule>;\n\tpublic static forRoot<RefreshRequest, RefreshResponse>(\n\t\tjwtModuleConfigurationProvider: JwtModuleConfigurationProvider,\n\t\tjwtRefreshConfigurationProvider?: JwtModuleRefreshConfigurationProvider<\n\t\t\tRefreshRequest,\n\t\t\tRefreshResponse\n\t\t>\n\t): ModuleWithProviders<JwtModule> {\n\t\treturn {\n\t\t\tngModule: JwtModule,\n\t\t\tproviders: [\n\t\t\t\t{\n\t\t\t\t\tprovide: HTTP_INTERCEPTORS,\n\t\t\t\t\tuseClass: JwtErrorHandlingInterceptor,\n\t\t\t\t\tmulti: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tprovide: HTTP_INTERCEPTORS,\n\t\t\t\t\tuseClass: JwtInjectorInterceptor,\n\t\t\t\t\tmulti: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tprovide: DEFAULT_JWT_CONFIGURATION_TOKEN,\n\t\t\t\t\tuseValue: DEFAULT_JWT_CONFIG,\n\t\t\t\t},\n\t\t\t\tcreateJwtConfigurationProvider(jwtModuleConfigurationProvider),\n\t\t\t\t...(jwtRefreshConfigurationProvider\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprovide: HTTP_INTERCEPTORS,\n\t\t\t\t\t\t\t\tuseClass: JwtRefreshInterceptor,\n\t\t\t\t\t\t\t\tmulti: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprovide: DEFAULT_JWT_REFRESH_CONFIGURATION_TOKEN,\n\t\t\t\t\t\t\t\tuseValue: DEFAULT_JWT_REFRESH_CONFIG,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcreateJwtRefreshConfigurationProvider<RefreshRequest, RefreshResponse>(\n\t\t\t\t\t\t\t\tjwtRefreshConfigurationProvider\n\t\t\t\t\t\t\t),\n\t\t\t\t\t  ]\n\t\t\t\t\t: []),\n\t\t\t],\n\t\t};\n\t}\n}\n","export enum HttpMethod {\n\tGET = 'GET',\n\tHEAD = 'HEAD',\n\tPOST = 'POST',\n\tPUT = 'PUT',\n\tDELETE = 'DELETE',\n\tCONNECT = 'CONNECT',\n\tOPTIONS = 'OPTIONS',\n\tTRACE = 'TRACE',\n\tPATCH = 'PATCH',\n}\n\nexport type HttpMethodType =\n\t| 'GET'\n\t| 'HEAD'\n\t| 'POST'\n\t| 'PUT'\n\t| 'DELETE'\n\t| 'CONNECT'\n\t| 'OPTIONS'\n\t| 'TRACE'\n\t| 'PATCH';\n"]}